{"version":3,"file":"dzsChipSelector.js","mappings":"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","sources":["webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.config.ts","webpack://chip-selector/webpack/bootstrap","webpack://chip-selector/webpack/runtime/define property getters","webpack://chip-selector/webpack/runtime/hasOwnProperty shorthand","webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector.config.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.type.ts","webpack://chip-selector/./src/dzs-chip-selector/js_common/dzs_helpers.ts","webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector--defaultOptions.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorHandlers.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorHelpers.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorViewConstructStructure.ts"],"sourcesContent":["export const DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE = 'dzs-chip-selector--autocompletelist--is-placeholder-visible'\nexport const DZS_CHIP_SELECTOR__CLASS_NAME__PRINCIPAL = 'dzs-chip-selector'","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * the default class name\n */\nexport const DZS_CHIP_SELECTOR_CLASS_NAME = 'dzs-chip-selector';\nexport const DZS_CHIP_SELECTOR_CHIPS_SELECTED = 'is-selected';\nexport const DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS = 'dzs-chip-selector--autocompletelist--items--item';\nexport const DZS_CHIP_SELECTOR_CHIPS_CLOSE = 'dzs-chip-selector--item--remove';\nexport const DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT = 'dzs-chip-selector--overflow-tooltip';","\nexport type ChipSelectorOptions = {\n  /** text for no items found */\n  placeholderNoItemsFound?: string,\n  /** include a middleware function like filtering the results */\n  middlewareFilterResults?: any,\n  /** the skin can be \"skin-default\", \"skin-flat\" - also needs css file being loaded */\n  viewSkin?: string,\n  /** the placeholder for Filter Results ... text */\n  inputPlaceholderText?: string,\n  /** custom function for onUpdate */\n  onUpdateFunction?: (...args: any[]) => any;\n  /** wrap false or true */\n  viewIsWrapping?: boolean,\n  /** the persistent options */\n  persistentOptions?: ChipSelectorItem[]\n};\n\n\nexport type ChipSelectorItem = {\n  htmlContent: string,\n  value: string,\n  currentStatus: string\n};\n\nexport enum currentStatusType {\n  CHECKED = 'checked',\n  UNCHECKED = 'unchecked',\n}","export function domRemoveChildren($ulItems: HTMLElement): void {\n\n  if($ulItems && $ulItems.firstChild){\n    while ($ulItems.firstChild) {\n      $ulItems.removeChild($ulItems.firstChild);\n    }\n  }\n}\n\nexport function insertHtml(t: HTMLElement, html: string, position = 'beforeend'): void{\n\n  t.insertAdjacentHTML(<\"beforebegin\" | \"afterbegin\" | \"beforeend\" | \"afterend\">position, html);\n}\n\n/**\n * Returns the computed value of a given CSS property on a given element\n * @param {HTMLElement} el - An instance of HTMLElement for which the computed value of a CSS property is to be returned.\n * @param {string} [cssProp = \"min-width\"] - The CSS property for which the computed value is to be returned. The default value is \"min-width\".\n * @param {boolean} [isGetAsNumber = false] - A boolean value indicating whether the computed value should be returned as a number or a string. The default value is false.\n * @return {(number|string)} - If isGetAsNumber is set to false, the function returns the computed value of the specified CSS property as a string. If isGetAsNumber is set to true, the function returns the computed value of the specified CSS property as a number.\n * @throws {TypeError} - If the element passed as an argument is not an instance of HTMLElement.\n*/\nexport function getComputedProp(el: HTMLElement, cssProp = \"min-width\", isGetAsNumber = false): number | string\n{\n  if(el){\n    const val = (globalThis as any).getComputedStyle(el,null).getPropertyValue(cssProp);\n    return isGetAsNumber ? parseFloat(val) : val;\n  }\n  return '';\n}\nexport function detectRegexPairs(str: string){\n  let regExp = /dzs-chip-selector--skin-(.*?)( |$)/g;\n  let match;\n  const matches = [];\n\n  while ((match = regExp.exec(str)) !== null) {\n    matches.push(match);\n  }\n\n  return matches;\n}\n\nexport function matchSelector(t: HTMLElement, sel: string): null | HTMLElement {\n\n  let matchedEl = null;\n  // @ts-ignore\n  while (t && t !== (this as unknown)) {\n    if (t && t.matches) {\n      if (t.matches(sel)) {\n        matchedEl = t;\n        break;\n      }\n      t = t.parentNode as HTMLElement;\n    } else {\n      break;\n    }\n  }\n\n  return matchedEl;\n\n}","/**\n * the default class name\n */\nimport { ChipSelectorOptions} from \"../dzs-chip-selector.type\";\n\n\n// -- 1 level, 2 level warning shallow copy\nexport const dzsChipSelectorDefaultOptions: ChipSelectorOptions = {\n  placeholderNoItemsFound: \"No items found\",\n  inputPlaceholderText: \"Filter results...\",\n  middlewareFilterResults: null,\n  viewSkin: 'default',\n  viewIsWrapping: true,\n};","import {matchSelector} from \"../js_common/dzs_helpers\";\nimport {\n  DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS,\n  DZS_CHIP_SELECTOR_CHIPS_CLOSE, DZS_CHIP_SELECTOR_CHIPS_SELECTED\n} from \"../config/dzs-chip-selector.config\";\nimport {currentStatusType} from \"../dzs-chip-selector.type\";\nimport {DzsChipSelector} from \"../dzs-chip-selector\";\n\n\nexport function setupHandlers(selfInstance: DzsChipSelector) {\n\n\n  selfInstance.$inputNewElement_.addEventListener('focus', handleInputEvent);\n  selfInstance.$inputNewElement_.addEventListener('blur', handleInputEvent);\n  selfInstance.$inputNewElement_.addEventListener('keyup', handleInputEvent);\n  selfInstance.$autoCompleteList.addEventListener('click', handleAutoCompleteList);\n  selfInstance.$elem_?.querySelector('.dzs-chip-selector--chip-list-wrapper')?.addEventListener('click', handleChipsClick);\n\n\n\n\n  if(!selfInstance.chipSelectorOptions.viewIsWrapping){\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      selfInstance.viewCheckIfNeedsWrapping(selfInstance);\n      console.log('Size changed', entries);\n    });\n\n    resizeObserver.observe(selfInstance.$elem_);\n  }\n\n\n  /**\n   * clicks on a chip\n   */\n  function handleChipsClick(e: Event) {\n\n    if (e.type === 'click') {\n      let t = e.target as HTMLElement;\n      const target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_CHIPS_CLOSE);\n\n      if (target) {\n        const $chip = target.parentNode;\n        const dataValue = String(($chip as HTMLElement).getAttribute('data-value'));\n\n        const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, (dataValue));\n        const persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, (dataValue));\n        targetOption ? (targetOption.currentStatus = currentStatusType.UNCHECKED) : console.log('[targetOption] targetOption not existing', selfInstance.autoCompleteOptions);\n        persistentOption.currentStatus = currentStatusType.UNCHECKED;\n\n        selfInstance.updateListFromOptions();\n        selfInstance.updateChipsFromOptions();\n        selfInstance.updateFormFromOptions();\n      }\n\n\n    }\n  }\n\n\n  /**\n   * clicks on list\n   */\n  function handleAutoCompleteList(e: Event) {\n\n    if (e.type === 'click') {\n\n\n      const sel = '';\n      let t = e.target as HTMLElement;\n      const $target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n      let persistentOptionIndex: number | null = null;\n      const dataValue = String($target?.getAttribute('data-value'));\n\n\n      if(dataValue){\n\n        const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, dataValue);\n        let persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, dataValue);\n\n        if (persistentOption === undefined) {\n\n          persistentOption = {\n            \"htmlContent\": $target?.innerHTML,\n            \"value\": $target?.getAttribute('data-value'),\n            \"currentStatus\": currentStatusType.UNCHECKED\n          }\n\n          selfInstance.persistentOptions.push(persistentOption);\n        }\n\n        if ($target?.classList.contains(DZS_CHIP_SELECTOR_CHIPS_SELECTED)) {\n          targetOption.currentStatus = currentStatusType.UNCHECKED;\n          persistentOption.currentStatus = currentStatusType.UNCHECKED;\n        } else {\n          // -- turn to checked\n          persistentOptionIndex = selfInstance.persistentOptions.findIndex(el => el.value === persistentOption.value);\n          // -- move to end of array\n          if (persistentOptionIndex < selfInstance.persistentOptions.length - 1) {\n            selfInstance.persistentOptions.push(selfInstance.persistentOptions.splice(persistentOptionIndex, 1)[0]);\n          }\n          targetOption.currentStatus = currentStatusType.CHECKED;\n          persistentOption.currentStatus = currentStatusType.CHECKED;\n        }\n\n        selfInstance.updateListFromOptions();\n        selfInstance.updateFormFromOptions();\n        selfInstance.updateChipsFromOptions();\n        selfInstance.$inputNewElement_.value = '';\n        selfInstance.$inputNewElement_.dispatchEvent(new Event('keyup'));\n        selfInstance.$inputNewElement_.dispatchEvent(new Event('change'));\n      }\n\n\n    }\n  }\n\n  // selfInstance.$inputNewElement.addEventListener()\n\n  function handleInputEvent(e: Event) {\n    const $t = selfInstance.$inputNewElement_;\n    if (e.type === 'keyup') {\n      if (selfInstance.inputForm_currentQueryString === $t.value) {\n        return;\n      }\n      selfInstance.inputForm_currentQueryString = $t.value;\n      selfInstance.autoCompleteFilterResults(selfInstance.inputForm_currentQueryString);\n    }\n    if (e.type === 'focus') {\n      selfInstance.onInputAreaFocus();\n    }\n    if (e.type === 'blur') {\n\n      selfInstance.onInputAreaFocus(false);\n    }\n  }\n}","import {\n  DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT,\n  DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS,\n  DZS_CHIP_SELECTOR_CHIPS_SELECTED,\n  DZS_CHIP_SELECTOR_CLASS_NAME\n} from \"./config/dzs-chip-selector.config\";\nimport {domRemoveChildren, getComputedProp, insertHtml} from \"./js_common/dzs_helpers\";\nimport {ChipSelectorItem, ChipSelectorOptions, currentStatusType} from \"./dzs-chip-selector.type\";\nimport {DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE} from \"./dzs-chip-selector.config\";\nimport {dzsChipSelectorDefaultOptions} from \"./config/dzs-chip-selector--defaultOptions\";\nimport {initChipSelector} from \"./jsinc/chipSelectorHelpers\";\nimport {setupHandlers} from \"./jsinc/chipSelectorHandlers\";\nimport {chipSelectorInitStructure, viewChipSelectorChipItemStructure} from \"./jsinc/chipSelectorViewConstructStructure\";\n\n\ndeclare global {\n  interface Window {\n    dzs_initDzsChipSelector: ($argChip_: HTMLElement, options?: ChipSelectorOptions) => void;\n  }\n\n  interface HTMLElement {\n    webComponent?: any;\n  }\n}\n\n\nexport class DzsChipSelector {\n  /** DOM - main element wrapper */\n  $elem_!: HTMLElement;\n  $inputNewElement_!: HTMLInputElement;\n  $autoCompleteList!: HTMLElement;\n  $form!: HTMLElement;\n  // $elem: esJquery;\n  // $inputNewElement: esJquery;\n\n  styleIsSkinSet = false;\n\n  feedSource = 'form';\n\n  /** single source of truth -- filtered by keyboard */\n  autoCompleteOptions: ChipSelectorItem[] = [];\n  /** single source of truth */\n  persistentOptions: ChipSelectorItem[] = [];\n  placeholderNoItemsFound!: string;\n  /** config options */\n  chipSelectorOptions!: ChipSelectorOptions;\n\n  inputForm_currentQueryString = '';\n\n\n  constructor($elem: HTMLElement, chipSelectorOptions: ChipSelectorOptions, isInitingClass = true) {\n\n    if (!$elem) {\n      return;\n    }\n\n    this.chipSelectorOptions = Object.assign({...dzsChipSelectorDefaultOptions}, chipSelectorOptions);\n\n    this.$elem_ = $elem;\n    ($elem as any).selfInstance = this;\n    this.placeholderNoItemsFound = String(this.chipSelectorOptions.placeholderNoItemsFound);\n    if (($elem as any).isDzsChipsInited) {\n      return;\n    }\n\n    if(isInitingClass){\n      this.initClass();\n    }\n  }\n\n  initClass() {\n\n    initChipSelector(this);\n\n    chipSelectorInitStructure(this);\n    this.initAfterStructure();\n  }\n\n  reinit() {\n    const selfInstance = this;\n\n    const $form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLElement;\n\n    if ($form) {\n      this.feedSource = 'form';\n      // @ts-ignore\n      this.chipSelectorOptions.persistentOptions = null;\n      this.getOptionsFromForm($form);\n    } else {\n      // -- get from html\n      if (this.$elem_.getAttribute('data-persistentOptions')) {\n        this.readAttrForPersistentOptions();\n      }\n    }\n    if (this.chipSelectorOptions.persistentOptions) {\n      this.feedSource = 'options';\n      this.persistentOptions = this.chipSelectorOptions.persistentOptions;\n      this.autoCompleteOptions = this.chipSelectorOptions.persistentOptions;\n    }\n    this.createListFromOptions();\n    selfInstance.updateChipsFromOptions();\n  }\n\n  readAttrForPersistentOptions() {\n    const dataPersistentOptions = this.$elem_.getAttribute('data-persistentOptions');\n    this.chipSelectorOptions.persistentOptions = JSON.parse(String(dataPersistentOptions));\n  }\n\n  getOptionsFromForm($form: HTMLElement) {\n\n    // -- parse main form\n    // @ts-ignore\n    $form.childNodes.forEach(($label: HTMLElement) => {\n      if ($label.nodeName.toLowerCase() === 'LABEL'.toLowerCase()) {\n\n\n        const $input = $label.querySelector('input');\n        const labelHtml = $label.innerHTML;\n        const labelHtmlCurated = labelHtml.replace(/<input.*?>/g, '');\n\n\n        const newItem: ChipSelectorItem = {\n          htmlContent: labelHtmlCurated,\n          value: String($input?.value),\n          currentStatus: $input?.checked ? currentStatusType.CHECKED : currentStatusType.UNCHECKED\n        };\n\n        this.persistentOptions.push(newItem);\n        this.autoCompleteOptions.push(newItem);\n      }\n    })\n  }\n\n\n  /**\n   init--\n   initAfterStructure--\n   reinit--\n   */\n  initAfterStructure() {\n    const selfInstance = this;\n    selfInstance.$inputNewElement_ = this.$elem_.querySelector('.dzs-chip-selector--input-new-element') as HTMLInputElement;\n    selfInstance.$autoCompleteList = this.$elem_.querySelector('.dzs-chip-selector--autocompletelist') as HTMLInputElement;\n    selfInstance.$form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLInputElement;\n\n    setupHandlers(this);\n\n\n    this.reinit();\n  }\n\n  onInputAreaFocus(isFocus = true) {\n\n    const autocompleteListX = this.$inputNewElement_.getBoundingClientRect().x - this.$elem_.getBoundingClientRect().x;\n\n    if (isFocus) {\n      this.$autoCompleteList.style.left = autocompleteListX + 'px';\n      this.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    } else {\n      this.$elem_.classList.remove(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    }\n  }\n\n\n  static getOptionFromValue(options: any[], dataValue: string) {\n\n    const foundItems = options.filter((item) => item.value === dataValue);\n\n    return foundItems[0];\n  }\n\n\n  /**\n   * updates from single source of truth this.$autoCompleteList -- .dzs-chip-selector--autocompletelist--items\n   */\n  updateListFromOptions() {\n\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n\n    let minWidthChild = null;\n    $ulItems?.childNodes.forEach(child => {\n\n      const dataValue = String((child as HTMLElement).getAttribute('data-value'));\n      const persistentOption = DzsChipSelector.getOptionFromValue(this.persistentOptions, dataValue);\n\n\n      if (persistentOption !== undefined) {\n        if (persistentOption.currentStatus === currentStatusType.UNCHECKED) {\n          (child as HTMLElement).classList.remove(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n        if (persistentOption.currentStatus === currentStatusType.CHECKED) {\n          (child as HTMLElement).classList.add(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n      }\n\n\n    })\n\n  }\n\n  /**\n   * updates the DOM -> FORM from single source of truth this.$autoCompleteList\n   */\n  updateFormFromOptions() {\n    const selfInstance = this;\n\n    if (this.feedSource === 'form') {\n\n      domRemoveChildren(selfInstance.$form);\n    }\n\n    if (this.$elem_.webComponent && this.$elem_.webComponent.onUpdate) {\n      this.chipSelectorOptions.onUpdateFunction = this.$elem_.webComponent.onUpdate;\n    }\n    if (this.chipSelectorOptions.onUpdateFunction) {\n      this.chipSelectorOptions.onUpdateFunction(this.persistentOptions);\n    }\n\n\n    if (this.feedSource === 'form') {\n      this.persistentOptions.forEach(item => {\n        insertHtml(selfInstance.$form, `<label><input type=\"checkbox\" ${item.currentStatus === currentStatusType.CHECKED ? currentStatusType.CHECKED : ''} name=\"subject[]\" value=\"${item.value}\">${item.htmlContent}</label>`)\n      })\n    }\n  }\n\n  /**\n   * updates from single source of truth this.$autoCompleteList\n   */\n  updateChipsFromOptions() {\n    const selfInstance = this;\n\n    const $chipsList = selfInstance.$elem_.querySelector('.dzs-chip-selector--chip-list-wrapper');\n    domRemoveChildren($chipsList as HTMLElement);\n\n    let tooltipContent = '';\n\n\n\n\n\n    this.persistentOptions.forEach(item => {\n      if (item.currentStatus === currentStatusType.CHECKED) {\n        insertHtml($chipsList as HTMLElement, viewChipSelectorChipItemStructure(item));\n\n        if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n          if (tooltipContent) {\n            tooltipContent += ', ';\n          }\n\n          tooltipContent += item.htmlContent;\n        }\n      }\n    })\n\n    if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n      this.viewCheckIfNeedsWrapping(this);\n      selfInstance.$elem_.querySelector('.' + DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT)!.innerHTML = tooltipContent;\n    }\n\n  }\n\n  viewCheckIfNeedsWrapping(selfInstance: DzsChipSelector){\n    let isOverflowing = false;\n    let overflowPlaceholderWidth = 0;\n    const minAutocompleteInputWidth = getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--input-new-element--label') as HTMLElement, 'min-width', true) as number;\n    const containerWidth = getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--container') as HTMLElement, 'width', true) as number;\n    let totalChipsWidth = 0;\n\n\n    if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n      overflowPlaceholderWidth = Number(getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--overflow-placeholder') as HTMLElement, 'width', true)) + Number(getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--overflow-placeholder') as HTMLElement, 'margin-left', true));\n    }\n\n    const $chipsList = selfInstance.$elem_.querySelector('.dzs-chip-selector--chip-list-wrapper');\n    $chipsList!.childNodes.forEach(($chip:ChildNode)=>{\n      const $lastChip = $chip as HTMLElement;\n      $lastChip.style.display = '';\n      totalChipsWidth += getComputedProp($lastChip as HTMLElement, 'width', true) as number + 3;\n      if (totalChipsWidth > containerWidth - minAutocompleteInputWidth - overflowPlaceholderWidth) {\n        $lastChip.style.display = 'none';\n        isOverflowing = true;\n      }else{\n        $lastChip.style.display = '';\n      }\n    })\n\n    if (isOverflowing) {\n      selfInstance.$elem_.classList.add('dzs-chip-selector--is-overflowing');\n    } else {\n\n      selfInstance.$elem_.classList.remove('dzs-chip-selector--is-overflowing');\n    }\n  }\n\n  /**\n   * create the list from currentItems\n   */\n  createListFromOptions() {\n\n    // todo: wrong, find suggestedItems\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n    domRemoveChildren($ulItems as HTMLElement);\n    this.autoCompleteOptions.forEach(item => {\n      insertHtml($ulItems as HTMLElement, `<li class=\"dzs-chip-selector--autocompletelist--items--item ${item.currentStatus === currentStatusType.CHECKED ? DZS_CHIP_SELECTOR_CHIPS_SELECTED : ''}\" data-value=\"${item.value}\">${item.htmlContent}</li>`);\n    })\n  }\n\n  getAutocompleteItemDomFromValue(arg: string) {\n    const $items = this.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n    $items.forEach(($item) => {\n      if ($item.getAttribute('data-value') === arg) {\n        return $item;\n      }\n    })\n  }\n\n  /**\n   * filter on each letter\n   */\n  autoCompleteFilterResults(stringSequence: string) {\n\n\n    if (stringSequence != this.inputForm_currentQueryString) {\n      return;\n    }\n\n    if (this.chipSelectorOptions.middlewareFilterResults) {\n      (this.chipSelectorOptions.middlewareFilterResults(this, stringSequence) as Promise<any>).then(() => {\n\n        filterResultsFrontend(this);\n      }).catch((err) => {\n        console.log('error - ', err);\n      });\n    } else {\n      filterResultsFrontend(this);\n    }\n\n\n    function filterResultsFrontend(selfInstance: DzsChipSelector) {\n\n      selfInstance.autoCompleteOptions.forEach((autocompleteOption) => {\n      })\n\n      const $autoCompleteListItems = selfInstance.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n      stringSequence = stringSequence.toLowerCase();\n\n      let nrResultsFound = 0;\n      $autoCompleteListItems.forEach(($autoCompleteListItem) => {\n        if (selfInstance.inputForm_currentQueryString === '' || ($autoCompleteListItem.textContent || '').toLowerCase().indexOf(stringSequence) > -1) {\n          $autoCompleteListItem.classList.remove('is-hidden');\n          nrResultsFound++;\n        } else {\n          $autoCompleteListItem.classList.add('is-hidden');\n        }\n      })\n\n      if (nrResultsFound === 0) {\n        selfInstance.$autoCompleteList.classList.add(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      } else {\n        selfInstance.$autoCompleteList.classList.remove(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      }\n    }\n  }\n}\n\nfunction getWindow() {\n  return globalThis as any || window as any;\n}\n\nexport function init_chipSelector($argChip_: HTMLElement, options: ChipSelectorOptions = {}) {\n  new DzsChipSelector($argChip_, options);\n\n}\n\ngetWindow().dzs_initDzsChipSelector = init_chipSelector;\n\n","import {DzsChipSelector} from \"../dzs-chip-selector\";\nimport {DZS_CHIP_SELECTOR_CLASS_NAME} from \"../config/dzs-chip-selector.config\";\nimport {detectRegexPairs} from \"../js_common/dzs_helpers\";\n\n\nexport function initChipSelector(selfInstance: DzsChipSelector){\n  selfInstance.styleIsSkinSet = false;\n\n  (selfInstance.$elem_ as any).isDzsChipsInited = true;\n\n  const matches = detectRegexPairs(selfInstance.$elem_.className);\n\n  if(matches.length){\n    selfInstance.styleIsSkinSet = true;\n  }\n\n  selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-inited');\n\n  if(!selfInstance.chipSelectorOptions.viewIsWrapping){\n\n    selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--view-one-line');\n  }\n\n  if(!selfInstance.styleIsSkinSet){\n    selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + `--skin-${selfInstance.chipSelectorOptions.viewSkin}`);\n  }\n}","import {DzsChipSelector} from \"../dzs-chip-selector\";\nimport {insertHtml} from \"../js_common/dzs_helpers\";\nimport {DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT} from \"../config/dzs-chip-selector.config\";\nimport {ChipSelectorItem} from \"../dzs-chip-selector.type\";\n\nexport function viewChipSelectorChipItemStructure(item: ChipSelectorItem) {\n  return `<li data-value=\"${item.value}\" class=\"dzs-chip-selector--item\">\n<div class=\"dzs-chip-selector--item--content\">${item.htmlContent}</div>\n<button _ngcontent-mua-c151=\"\" matchipremove=\"\" class=\"dzs-chip-selector--item--remove\"  type=\"button\">\n  <figure>x</figure>\n</button>\n</li>`;\n}\n\nexport function chipSelectorInitStructure(selfInstance: DzsChipSelector) {\n\n\n  if (!selfInstance.$elem_.querySelector('.dzs-chip-selector--container')) {\n\n    const chipListString = `<div class=\"dzs-chip-selector--chip-list\">\n              <ul class=\"dzs-chip-selector--chip-list-wrapper\">\n\n              </ul>\n            </div>`;\n\n\n    const chipListOverflowPlaceholder = `<div class=\"dzs-chip-selector--overflow-placeholder\"><span>...</span>\n  <span class=\"${DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT}\">This is the tooltip text</span></div>`;\n\n    const chipListInputNewElement = `<label class=\"dzs-chip-selector--input-new-element--label\">\n              <input placeholder=\"${selfInstance.chipSelectorOptions.inputPlaceholderText}\" class=\"dzs-chip-selector--input-new-element\"\n                     autocomplete=\"off\"\n                     role=\"combobox\" aria-autocomplete=\"list\" aria-expanded=\"false\"\n                     aria-haspopup=\"listbox\"\n                     aria-owns=\"mat-autocomplete-1\">\n            </label>`;\n\n\n    insertHtml(selfInstance.$elem_, `<div class=\"dzs-chip-selector--container\">\n          <div class=\"dzs-chip-selector--form-field\">\n            ${chipListString}\n            ${selfInstance.chipSelectorOptions.viewIsWrapping ? '' : chipListOverflowPlaceholder}\n            ${chipListInputNewElement}\n          </div>\n        </div>`)\n\n  }\n\n  if (!selfInstance.$elem_.querySelector('.dzs-chip-selector--autocompletelist')) {\n\n    insertHtml(selfInstance.$elem_, `<div class=\"dzs-chip-selector--autocompletelist\">\n          <div class=\"dzs-chip-selector--autocompletelist--inner\">\n            <div class=\"dzs-chip-selector--autocompletelist--placeholder\">No items found</div>\n            <ul class=\"dzs-chip-selector--autocompletelist--items\">\n            </ul>\n          </div>\n        </div>`)\n\n  }\n}"],"names":["DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","currentStatusType","DZS_CHIP_SELECTOR_CLASS_NAME","DZS_CHIP_SELECTOR_CHIPS_SELECTED","DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS","DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT","domRemoveChildren","$ulItems","firstChild","removeChild","insertHtml","t","html","position","insertAdjacentHTML","getComputedProp","el","cssProp","isGetAsNumber","val","globalThis","getComputedStyle","getPropertyValue","parseFloat","matchSelector","sel","matchedEl","this","matches","parentNode","dzsChipSelectorDefaultOptions","placeholderNoItemsFound","inputPlaceholderText","middlewareFilterResults","viewSkin","viewIsWrapping","setupHandlers","selfInstance","handleInputEvent","e","$t","$inputNewElement_","type","inputForm_currentQueryString","value","autoCompleteFilterResults","onInputAreaFocus","addEventListener","$autoCompleteList","$target","target","persistentOptionIndex","dataValue","String","getAttribute","targetOption","DzsChipSelector","getOptionFromValue","autoCompleteOptions","persistentOption","persistentOptions","innerHTML","UNCHECKED","push","classList","contains","currentStatus","findIndex","length","splice","CHECKED","updateListFromOptions","updateFormFromOptions","updateChipsFromOptions","dispatchEvent","Event","$elem_","querySelector","$chip","console","log","chipSelectorOptions","ResizeObserver","entries","viewCheckIfNeedsWrapping","observe","$elem","isInitingClass","assign","isDzsChipsInited","initClass","styleIsSkinSet","str","match","regExp","exec","detectRegexPairs","className","add","chipListOverflowPlaceholder","chipListInputNewElement","chipSelectorInitStructure","initAfterStructure","$form","feedSource","getOptionsFromForm","readAttrForPersistentOptions","createListFromOptions","dataPersistentOptions","JSON","parse","childNodes","forEach","$label","nodeName","toLowerCase","$input","newItem","htmlContent","replace","checked","reinit","isFocus","autocompleteListX","getBoundingClientRect","x","style","left","remove","child","webComponent","onUpdate","onUpdateFunction","item","$chipsList","tooltipContent","viewChipSelectorChipItemStructure","isOverflowing","overflowPlaceholderWidth","minAutocompleteInputWidth","containerWidth","totalChipsWidth","Number","$lastChip","display","arg","querySelectorAll","$item","stringSequence","filterResultsFrontend","autocompleteOption","$autoCompleteListItems","nrResultsFound","$autoCompleteListItem","textContent","indexOf","then","err","options","filter","window","dzs_initDzsChipSelector","$argChip_"],"sourceRoot":""}