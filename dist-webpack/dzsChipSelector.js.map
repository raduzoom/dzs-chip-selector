{"version":3,"file":"dzsChipSelector.js","mappings":"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","sources":["webpack://chip-selector/webpack/bootstrap","webpack://chip-selector/webpack/runtime/define property getters","webpack://chip-selector/webpack/runtime/hasOwnProperty shorthand","webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector.config.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.type.ts","webpack://chip-selector/./src/dzs-chip-selector/js_common/dzs_helpers.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.config.ts","webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector--defaultOptions.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorHandlers.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorHelpers.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorViewConstructStructure.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\n * the default class name\n */\nexport const DZS_CHIP_SELECTOR_CLASS_NAME = 'dzs-chip-selector';\nexport const DZS_CHIP_SELECTOR_CHIPS_SELECTED = 'is-selected';\nexport const DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS = 'dzs-chip-selector--autocompletelist--items--item';\nexport const DZS_CHIP_SELECTOR_CHIPS_CLOSE = 'dzs-chip-selector--item--remove';\nexport const DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT = 'dzs-chip-selector--overflow-tooltip';","\nexport type ChipSelectorOptions = {\n  placeholderNoItemsFound?: string,\n  middlewareFilterResults?: any,\n  viewSkin?: string,\n  onUpdateFunction?: (...args: any[]) => any;\n  viewIsWrapping?: boolean,\n  persistentOptions?: ChipSelectorItem[]\n};\n\n\nexport type ChipSelectorItem = {\n  htmlContent: string,\n  value: string,\n  currentStatus: string\n};\n\nexport enum currentStatusType {\n  CHECKED = 'checked',\n  UNCHECKED = 'unchecked',\n}","export function domRemoveChildren($ulItems: HTMLElement): void {\n\n  while ($ulItems.firstChild) {\n    $ulItems.removeChild($ulItems.firstChild);\n  }\n}\n\nexport function insertHtml(t: HTMLElement, html: string, position = 'beforeend'): void{\n\n  t.insertAdjacentHTML(<\"beforebegin\" | \"afterbegin\" | \"beforeend\" | \"afterend\">position, html);\n}\n\n\nexport function getComputedProp(el: HTMLElement, cssProp = \"min-width\", isGetAsNumber = false): number | string\n{\n  const val = window.getComputedStyle(el,null).getPropertyValue(cssProp);\n  return isGetAsNumber ? parseFloat(val) : val;\n}\nexport function detectRegexPairs(str: string){\n  let regExp = /dzs-chip-selector--skin-(.*?)( |$)/g;\n  let match;\n  const matches = [];\n\n  while ((match = regExp.exec(str)) !== null) {\n    matches.push(match);\n  }\n\n  return matches;\n\n\n}\n\nexport function matchSelector(t: HTMLElement, sel: string): null | HTMLElement {\n\n  let matchedEl = null;\n  // @ts-ignore\n  while (t && t !== (this as any)) {\n    if (t && t.matches) {\n      if (t.matches(sel)) {\n        matchedEl = t;\n        break;\n      }\n      t = t.parentNode as HTMLElement;\n    } else {\n      break;\n    }\n  }\n\n  return matchedEl;\n\n}","export const DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE = 'dzs-chip-selector--autocompletelist--is-placeholder-visible'","/**\n * the default class name\n */\nimport { ChipSelectorOptions} from \"../dzs-chip-selector.type\";\n\n\n// -- 1 level, 2 level warning shallow copy\nexport const dzsChipSelectorDefaultOptions: ChipSelectorOptions = {\n  placeholderNoItemsFound: \"No items found\",\n  middlewareFilterResults: null,\n  viewSkin: 'default',\n  viewIsWrapping: true,\n};","import {matchSelector} from \"../js_common/dzs_helpers\";\nimport {\n  DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS,\n  DZS_CHIP_SELECTOR_CHIPS_CLOSE, DZS_CHIP_SELECTOR_CHIPS_SELECTED\n} from \"../config/dzs-chip-selector.config\";\nimport {currentStatusType} from \"../dzs-chip-selector.type\";\nimport {DzsChipSelector} from \"../dzs-chip-selector\";\n\n\nexport function setupHandlers(selfInstance: DzsChipSelector) {\n\n\n  selfInstance.$inputNewElement_.addEventListener('focus', handleInputEvent);\n  selfInstance.$inputNewElement_.addEventListener('blur', handleInputEvent);\n  selfInstance.$inputNewElement_.addEventListener('keyup', handleInputEvent);\n  selfInstance.$autoCompleteList.addEventListener('click', handleAutoCompleteList);\n  selfInstance.$elem_?.querySelector('.dzs-chip-selector--chip-list-wrapper')?.addEventListener('click', handleChipsClick);\n\n\n\n\n  if(!selfInstance.chipSelectorOptions.viewIsWrapping){\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      selfInstance.viewCheckIfNeedsWrapping(selfInstance);\n      console.log('Size changed', entries);\n    });\n\n    resizeObserver.observe(selfInstance.$elem_);\n  }\n\n\n  /**\n   * clicks on a chip\n   */\n  function handleChipsClick(e: Event) {\n\n    if (e.type === 'click') {\n      let t = e.target as HTMLElement;\n      const target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_CHIPS_CLOSE);\n\n      if (target) {\n        const $chip = target.parentNode;\n        const dataValue = String(($chip as HTMLElement).getAttribute('data-value'));\n\n        const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, (dataValue));\n        const persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, (dataValue));\n        targetOption.currentStatus = currentStatusType.UNCHECKED;\n        persistentOption.currentStatus = currentStatusType.UNCHECKED;\n\n        selfInstance.updateListFromOptions();\n        selfInstance.updateChipsFromOptions();\n        selfInstance.updateFormFromOptions();\n      }\n\n\n    }\n  }\n\n\n  /**\n   * clicks on list\n   */\n  function handleAutoCompleteList(e: Event) {\n\n    if (e.type === 'click') {\n\n\n      const sel = '';\n      let t = e.target as HTMLElement;\n      const $target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n      let persistentOptionIndex: number | null = null;\n      const dataValue = String($target?.getAttribute('data-value'));\n      const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, dataValue);\n      let persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, dataValue);\n\n      if (persistentOption === undefined) {\n\n        persistentOption = {\n          \"htmlContent\": $target?.innerHTML,\n          \"value\": $target?.getAttribute('data-value'),\n          \"currentStatus\": currentStatusType.UNCHECKED\n        }\n\n        selfInstance.persistentOptions.push(persistentOption);\n      }\n\n      if ($target?.classList.contains(DZS_CHIP_SELECTOR_CHIPS_SELECTED)) {\n        targetOption.currentStatus = currentStatusType.UNCHECKED;\n        persistentOption.currentStatus = currentStatusType.UNCHECKED;\n      } else {\n        // -- turn to checked\n        persistentOptionIndex = selfInstance.persistentOptions.findIndex(el => el.value === persistentOption.value);\n        // -- move to end of array\n        if (persistentOptionIndex < selfInstance.persistentOptions.length - 1) {\n          selfInstance.persistentOptions.push(selfInstance.persistentOptions.splice(persistentOptionIndex, 1)[0]);\n        }\n        targetOption.currentStatus = currentStatusType.CHECKED;\n        persistentOption.currentStatus = currentStatusType.CHECKED;\n      }\n\n      selfInstance.updateListFromOptions();\n      selfInstance.updateFormFromOptions();\n      selfInstance.updateChipsFromOptions();\n      selfInstance.$inputNewElement_.value = '';\n      selfInstance.$inputNewElement_.dispatchEvent(new Event('keyup'));\n      selfInstance.$inputNewElement_.dispatchEvent(new Event('change'));\n\n\n    }\n  }\n\n  // selfInstance.$inputNewElement.addEventListener()\n\n  function handleInputEvent(e: Event) {\n    const $t = selfInstance.$inputNewElement_;\n    if (e.type === 'keyup') {\n      if (selfInstance.inputForm_currentQueryString === $t.value) {\n        return;\n      }\n      selfInstance.inputForm_currentQueryString = $t.value;\n      selfInstance.autoCompleteFilterResults(selfInstance.inputForm_currentQueryString);\n    }\n    if (e.type === 'focus') {\n      selfInstance.onInputAreaFocus();\n    }\n    if (e.type === 'blur') {\n\n      selfInstance.onInputAreaFocus(false);\n    }\n  }\n}","import {\n  DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT,\n  DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS,\n  DZS_CHIP_SELECTOR_CHIPS_SELECTED,\n  DZS_CHIP_SELECTOR_CLASS_NAME\n} from \"./config/dzs-chip-selector.config\";\nimport {domRemoveChildren, getComputedProp, insertHtml} from \"./js_common/dzs_helpers\";\nimport {ChipSelectorItem, ChipSelectorOptions, currentStatusType} from \"./dzs-chip-selector.type\";\nimport {DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE} from \"./dzs-chip-selector.config\";\nimport {dzsChipSelectorDefaultOptions} from \"./config/dzs-chip-selector--defaultOptions\";\nimport {initChipSelector} from \"./jsinc/chipSelectorHelpers\";\nimport {setupHandlers} from \"./jsinc/chipSelectorHandlers\";\nimport {chipSelectorInitStructure, viewChipSelectorChipItemStructure} from \"./jsinc/chipSelectorViewConstructStructure\";\n// import {$es} from '../../deps/esjquery/js/_esjquery';\n\n\ndeclare global {\n  interface Window {\n    dzs_initDzsChipSelector: ($argChip_: HTMLElement, options?: ChipSelectorOptions) => void;\n  }\n\n  interface HTMLElement {\n    webComponent?: any;\n  }\n}\n\n\n// todo: temp\n// type esJquery = {\n//\n//   addClass: (arg:string) => {}\n//   find: (arg:string) => esJquery\n// };\n\nexport class DzsChipSelector {\n  /** DOM - main element wrapper */\n  $elem_!: HTMLElement;\n  $inputNewElement_!: HTMLInputElement;\n  $autoCompleteList!: HTMLElement;\n  $form!: HTMLElement;\n  // $elem: esJquery;\n  // $inputNewElement: esJquery;\n\n  styleIsSkinSet = false;\n\n  feedSource = 'form';\n\n  /** single source of truth -- filtered by keyboard */\n  autoCompleteOptions: ChipSelectorItem[] = [];\n  /** single source of truth */\n  persistentOptions: ChipSelectorItem[] = [];\n  placeholderNoItemsFound!: string;\n  /** config options */\n  chipSelectorOptions!: ChipSelectorOptions;\n\n  inputForm_currentQueryString = '';\n\n\n  constructor($elem: HTMLElement, chipSelectorOptions: ChipSelectorOptions) {\n\n    if (!$elem) {\n      return;\n    }\n\n    this.chipSelectorOptions = Object.assign({...dzsChipSelectorDefaultOptions}, chipSelectorOptions);\n\n    this.$elem_ = $elem;\n    ($elem as any).selfInstance = this;\n    this.placeholderNoItemsFound = String(this.chipSelectorOptions.placeholderNoItemsFound);\n    if (($elem as any).isDzsChipsInited) {\n      return;\n    }\n\n    this.initClass()\n  }\n\n  initClass() {\n\n    initChipSelector(this);\n\n    chipSelectorInitStructure(this);\n    this.initAfterStructure();\n  }\n\n  reinit() {\n    const selfInstance = this;\n\n    const $form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLElement;\n\n    if ($form) {\n      this.feedSource = 'form';\n      // @ts-ignore\n      this.chipSelectorOptions.persistentOptions = null;\n      this.getOptionsFromForm($form);\n    } else {\n      // -- get from html\n      if (this.$elem_.getAttribute('data-persistentOptions')) {\n        this.readAttrForPersistentOptions();\n      }\n    }\n    if (this.chipSelectorOptions.persistentOptions) {\n      this.feedSource = 'options';\n      this.persistentOptions = this.chipSelectorOptions.persistentOptions;\n      this.autoCompleteOptions = this.chipSelectorOptions.persistentOptions;\n    }\n    this.createListFromOptions();\n    selfInstance.updateChipsFromOptions();\n  }\n\n  readAttrForPersistentOptions() {\n    const dataPersistentOptions = this.$elem_.getAttribute('data-persistentOptions');\n    this.chipSelectorOptions.persistentOptions = JSON.parse(String(dataPersistentOptions));\n  }\n\n  getOptionsFromForm($form: HTMLElement) {\n\n    // -- parse main form\n    // @ts-ignore\n    $form.childNodes.forEach(($label: HTMLElement) => {\n      if ($label.nodeName.toLowerCase() === 'LABEL'.toLowerCase()) {\n\n\n        const $input = $label.querySelector('input');\n        const labelHtml = $label.innerHTML;\n        const labelHtmlCurated = labelHtml.replace(/<input.*?>/g, '');\n\n\n        const newItem: ChipSelectorItem = {\n          htmlContent: labelHtmlCurated,\n          value: String($input?.value),\n          currentStatus: $input?.checked ? currentStatusType.CHECKED : currentStatusType.UNCHECKED\n        };\n\n        this.persistentOptions.push(newItem);\n        this.autoCompleteOptions.push(newItem);\n      }\n    })\n  }\n\n\n  /**\n   init--\n   initAfterStructure--\n   reinit--\n   */\n  initAfterStructure() {\n    const selfInstance = this;\n    selfInstance.$inputNewElement_ = this.$elem_.querySelector('.dzs-chip-selector--input-new-element') as HTMLInputElement;\n    selfInstance.$autoCompleteList = this.$elem_.querySelector('.dzs-chip-selector--autocompletelist') as HTMLInputElement;\n    selfInstance.$form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLInputElement;\n\n    setupHandlers(this);\n\n\n    this.reinit();\n  }\n\n  onInputAreaFocus(isFocus = true) {\n\n    const autocompleteListX = this.$inputNewElement_.getBoundingClientRect().x - this.$elem_.getBoundingClientRect().x;\n\n    if (isFocus) {\n      this.$autoCompleteList.style.left = autocompleteListX + 'px';\n      this.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    } else {\n      this.$elem_.classList.remove(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    }\n  }\n\n\n  static getOptionFromValue(options: any[], dataValue: string) {\n\n    const foundItems = options.filter((item) => item.value === dataValue);\n\n    return foundItems[0];\n  }\n\n\n  /**\n   * updates from single source of truth this.$autoCompleteList -- .dzs-chip-selector--autocompletelist--items\n   */\n  updateListFromOptions() {\n\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n\n    let minWidthChild = null;\n    $ulItems?.childNodes.forEach(child => {\n\n      const dataValue = String((child as HTMLElement).getAttribute('data-value'));\n      const persistentOption = DzsChipSelector.getOptionFromValue(this.persistentOptions, dataValue);\n\n\n      if (persistentOption !== undefined) {\n        if (persistentOption.currentStatus === currentStatusType.UNCHECKED) {\n          (child as HTMLElement).classList.remove(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n        if (persistentOption.currentStatus === currentStatusType.CHECKED) {\n          (child as HTMLElement).classList.add(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n      }\n\n\n    })\n\n  }\n\n  /**\n   * updates the DOM -> FORM from single source of truth this.$autoCompleteList\n   */\n  updateFormFromOptions() {\n    const selfInstance = this;\n\n    if (this.feedSource === 'form') {\n\n      domRemoveChildren(selfInstance.$form);\n    }\n\n    if (this.$elem_.webComponent && this.$elem_.webComponent.onUpdate) {\n      this.chipSelectorOptions.onUpdateFunction = this.$elem_.webComponent.onUpdate;\n    }\n    if (this.chipSelectorOptions.onUpdateFunction) {\n      this.chipSelectorOptions.onUpdateFunction(this.persistentOptions);\n    }\n\n\n    if (this.feedSource === 'form') {\n      this.persistentOptions.forEach(item => {\n        insertHtml(selfInstance.$form, `<label><input type=\"checkbox\" ${item.currentStatus === currentStatusType.CHECKED ? currentStatusType.CHECKED : ''} name=\"subject[]\" value=\"${item.value}\">${item.htmlContent}</label>`)\n      })\n    }\n  }\n\n  /**\n   * updates from single source of truth this.$autoCompleteList\n   */\n  updateChipsFromOptions() {\n    const selfInstance = this;\n\n    const $chipsList = selfInstance.$elem_.querySelector('.dzs-chip-selector--chip-list-wrapper');\n    domRemoveChildren($chipsList as HTMLElement);\n\n    let tooltipContent = '';\n\n\n\n\n\n    this.persistentOptions.forEach(item => {\n      if (item.currentStatus === currentStatusType.CHECKED) {\n        insertHtml($chipsList as HTMLElement, viewChipSelectorChipItemStructure(item));\n        const $lastChip = $chipsList!.lastElementChild as HTMLElement;\n\n        if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n\n          if (tooltipContent) {\n            tooltipContent += ', ';\n          }\n\n          tooltipContent += item.htmlContent;\n        }\n      }\n    })\n\n    if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n      this.viewCheckIfNeedsWrapping(this);\n      selfInstance.$elem_.querySelector('.' + DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT)!.innerHTML = tooltipContent;\n    }\n\n  }\n\n  viewCheckIfNeedsWrapping(selfInstance: DzsChipSelector){\n    let isOverflowing = false;\n    let overflowPlaceholderWidth = 0;\n    const minAutocompleteInputWidth = getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--input-new-element--label') as HTMLElement, 'min-width', true) as number;\n    const containerWidth = getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--container') as HTMLElement, 'width', true) as number;\n    let totalChipsWidth = 0;\n\n\n    if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n      overflowPlaceholderWidth = Number(getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--overflow-placeholder') as HTMLElement, 'width', true)) + Number(getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--overflow-placeholder') as HTMLElement, 'margin-left', true));\n    }\n\n    const $chipsList = selfInstance.$elem_.querySelector('.dzs-chip-selector--chip-list-wrapper');\n    $chipsList!.childNodes.forEach(($chip:ChildNode)=>{\n      const $lastChip = $chip as HTMLElement;\n      $lastChip.style.display = '';\n      totalChipsWidth += getComputedProp($lastChip as HTMLElement, 'width', true) as number + 3;\n      if (totalChipsWidth > containerWidth - minAutocompleteInputWidth - overflowPlaceholderWidth) {\n        $lastChip.style.display = 'none';\n        isOverflowing = true;\n      }else{\n        $lastChip.style.display = '';\n      }\n    })\n\n    if (isOverflowing) {\n      selfInstance.$elem_.classList.add('dzs-chip-selector--is-overflowing');\n    } else {\n\n      selfInstance.$elem_.classList.remove('dzs-chip-selector--is-overflowing');\n    }\n  }\n\n  /**\n   * create the list from currentItems\n   */\n  createListFromOptions() {\n\n    // todo: wrong, find suggestedItems\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n    domRemoveChildren($ulItems as HTMLElement);\n    this.autoCompleteOptions.forEach(item => {\n      insertHtml($ulItems as HTMLElement, `<li class=\"dzs-chip-selector--autocompletelist--items--item ${item.currentStatus === currentStatusType.CHECKED ? DZS_CHIP_SELECTOR_CHIPS_SELECTED : ''}\" data-value=\"${item.value}\">${item.htmlContent}</li>`);\n    })\n  }\n\n  getAutocompleteItemDomFromValue(arg: string) {\n    const $items = this.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n    $items.forEach(($item) => {\n      if ($item.getAttribute('data-value') === arg) {\n        return $item;\n      }\n    })\n  }\n\n  /**\n   * filter on each letter\n   */\n  autoCompleteFilterResults(stringSequence: string) {\n\n\n    if (stringSequence != this.inputForm_currentQueryString) {\n      return;\n    }\n\n    if (this.chipSelectorOptions.middlewareFilterResults) {\n      (this.chipSelectorOptions.middlewareFilterResults(this, stringSequence) as Promise<any>).then(() => {\n\n        filterResultsFrontend(this);\n      }).catch((err) => {\n        console.log('error - ', err);\n      });\n    } else {\n      filterResultsFrontend(this);\n    }\n\n\n    function filterResultsFrontend(selfInstance: DzsChipSelector) {\n\n      selfInstance.autoCompleteOptions.forEach((autocompleteOption) => {\n      })\n\n      const $autoCompleteListItems = selfInstance.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n      stringSequence = stringSequence.toLowerCase();\n\n      let nrResultsFound = 0;\n      $autoCompleteListItems.forEach(($autoCompleteListItem) => {\n        if (selfInstance.inputForm_currentQueryString === '' || ($autoCompleteListItem.textContent || '').toLowerCase().indexOf(stringSequence) > -1) {\n          $autoCompleteListItem.classList.remove('is-hidden');\n          nrResultsFound++;\n        } else {\n          $autoCompleteListItem.classList.add('is-hidden');\n        }\n      })\n\n      if (nrResultsFound === 0) {\n        selfInstance.$autoCompleteList.classList.add(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      } else {\n        selfInstance.$autoCompleteList.classList.remove(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      }\n    }\n  }\n}\n\nfunction getWindow() {\n  return window || globalThis as any;\n}\n\nexport function init_chipSelector($argChip_: HTMLElement, options: ChipSelectorOptions = {}) {\n  new DzsChipSelector($argChip_, options);\n\n}\n\ngetWindow().dzs_initDzsChipSelector = init_chipSelector;\n\n","import {DzsChipSelector} from \"../dzs-chip-selector\";\nimport {DZS_CHIP_SELECTOR_CLASS_NAME} from \"../config/dzs-chip-selector.config\";\nimport {detectRegexPairs} from \"../js_common/dzs_helpers\";\n\n\nexport function initChipSelector(selfInstance: DzsChipSelector){\n  selfInstance.styleIsSkinSet = false;\n\n  (selfInstance.$elem_ as any).isDzsChipsInited = true;\n\n  const matches = detectRegexPairs(selfInstance.$elem_.className);\n\n  if(matches.length){\n    selfInstance.styleIsSkinSet = true;\n  }\n\n  selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-inited');\n\n  if(!selfInstance.chipSelectorOptions.viewIsWrapping){\n\n    selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--view-one-line');\n  }\n\n  if(!selfInstance.styleIsSkinSet){\n    selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + `--skin-${selfInstance.chipSelectorOptions.viewSkin}`);\n  }\n}","import {DzsChipSelector} from \"../dzs-chip-selector\";\nimport {insertHtml} from \"../js_common/dzs_helpers\";\nimport {DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT} from \"../config/dzs-chip-selector.config\";\nimport {ChipSelectorItem} from \"../dzs-chip-selector.type\";\n\nexport function viewChipSelectorChipItemStructure(item: ChipSelectorItem) {\n  return `<li data-value=\"${item.value}\" class=\"dzs-chip-selector--item\">\n<div class=\"dzs-chip-selector--item--content\">${item.htmlContent}</div>\n<button _ngcontent-mua-c151=\"\" matchipremove=\"\" class=\"dzs-chip-selector--item--remove\"  type=\"button\">\n  <figure>x</figure>\n</button>\n</li>`;\n}\n\nexport function chipSelectorInitStructure(selfInstance: DzsChipSelector) {\n\n\n  if (!selfInstance.$elem_.querySelector('.dzs-chip-selector--container')) {\n\n    const chipListString = `<div class=\"dzs-chip-selector--chip-list\">\n              <ul class=\"dzs-chip-selector--chip-list-wrapper\">\n\n              </ul>\n            </div>`;\n\n\n    const chipListOverflowPlaceholder = `<div class=\"dzs-chip-selector--overflow-placeholder\"><span>...</span>\n  <span class=\"${DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT}\">This is the tooltip text</span></div>`;\n\n    const chipListInputNewElement = `<label class=\"dzs-chip-selector--input-new-element--label\">\n              <input placeholder=\"New fruit...\" class=\"dzs-chip-selector--input-new-element\"\n                     autocomplete=\"off\"\n                     role=\"combobox\" aria-autocomplete=\"list\" aria-expanded=\"false\"\n                     aria-haspopup=\"listbox\"\n                     aria-owns=\"mat-autocomplete-1\">\n            </label>`;\n\n\n    insertHtml(selfInstance.$elem_, `<div class=\"dzs-chip-selector--container\">\n          <div class=\"dzs-chip-selector--form-field\">\n            ${chipListString}\n            ${selfInstance.chipSelectorOptions.viewIsWrapping ? '' : chipListOverflowPlaceholder}\n            ${chipListInputNewElement}\n          </div>\n        </div>`)\n\n  }\n\n  if (!selfInstance.$elem_.querySelector('.dzs-chip-selector--autocompletelist')) {\n\n    insertHtml(selfInstance.$elem_, `<div class=\"dzs-chip-selector--autocompletelist\">\n          <div class=\"dzs-chip-selector--autocompletelist--inner\">\n            <div class=\"dzs-chip-selector--autocompletelist--placeholder\">No items found</div>\n            <ul class=\"dzs-chip-selector--autocompletelist--items\">\n            </ul>\n          </div>\n        </div>`)\n\n  }\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","currentStatusType","DZS_CHIP_SELECTOR_CLASS_NAME","DZS_CHIP_SELECTOR_CHIPS_SELECTED","DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS","DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT","domRemoveChildren","$ulItems","firstChild","removeChild","insertHtml","t","html","position","insertAdjacentHTML","getComputedProp","el","cssProp","isGetAsNumber","val","window","getComputedStyle","getPropertyValue","parseFloat","matchSelector","sel","matchedEl","this","matches","parentNode","DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE","dzsChipSelectorDefaultOptions","placeholderNoItemsFound","middlewareFilterResults","viewSkin","viewIsWrapping","setupHandlers","selfInstance","handleInputEvent","e","$t","$inputNewElement_","type","inputForm_currentQueryString","value","autoCompleteFilterResults","onInputAreaFocus","addEventListener","$autoCompleteList","$target","target","persistentOptionIndex","dataValue","String","getAttribute","targetOption","DzsChipSelector","getOptionFromValue","autoCompleteOptions","persistentOption","persistentOptions","undefined","innerHTML","UNCHECKED","push","classList","contains","currentStatus","findIndex","length","splice","CHECKED","updateListFromOptions","updateFormFromOptions","updateChipsFromOptions","dispatchEvent","Event","$elem_","querySelector","$chip","chipSelectorOptions","ResizeObserver","entries","viewCheckIfNeedsWrapping","console","log","observe","$elem","assign","isDzsChipsInited","initClass","styleIsSkinSet","str","match","regExp","exec","detectRegexPairs","className","add","chipListOverflowPlaceholder","chipSelectorInitStructure","initAfterStructure","$form","feedSource","getOptionsFromForm","readAttrForPersistentOptions","createListFromOptions","dataPersistentOptions","JSON","parse","childNodes","forEach","$label","nodeName","toLowerCase","$input","newItem","htmlContent","replace","checked","reinit","isFocus","autocompleteListX","getBoundingClientRect","x","style","left","remove","child","webComponent","onUpdate","onUpdateFunction","item","$chipsList","tooltipContent","viewChipSelectorChipItemStructure","lastElementChild","isOverflowing","overflowPlaceholderWidth","minAutocompleteInputWidth","containerWidth","totalChipsWidth","Number","$lastChip","display","arg","querySelectorAll","$item","stringSequence","filterResultsFrontend","autocompleteOption","$autoCompleteListItems","nrResultsFound","$autoCompleteListItem","textContent","indexOf","then","err","options","filter","globalThis","dzs_initDzsChipSelector","$argChip_"],"sourceRoot":""}