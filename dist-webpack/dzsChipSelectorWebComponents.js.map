{"version":3,"file":"dzsChipSelectorWebComponents.js","mappings":"yDAGO,ICaKA,EDbCC,EAA+B,oBAC/BC,EAAmC,cACnCC,EAAkD,mDELxD,SAASC,EAAkBC,GAEhC,KAAOA,EAASC,YACdD,EAASE,YAAYF,EAASC,WAEjC,CAEM,SAASE,EAAWC,EAAgBC,GAA2C,IAA7BC,EAA6B,uDAAlB,YAElEF,EAAEG,mBAA4ED,EAAUD,EACzF,CAEM,SAASG,EAAcJ,EAAgBK,GAI5C,IAFA,IAAIC,EAAY,KAETN,GAAKA,IAAOO,MACbP,GAAKA,EAAEQ,SADoB,CAE7B,GAAIR,EAAEQ,QAAQH,GAAM,CAClBC,EAAYN,EACZ,KACD,CACDA,EAAIA,EAAES,UAIT,CAED,OAAOH,CAER,E,SDdWf,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,UAAAA,W,EAAAA,IAAAA,EAAAA,CAAAA,IEhBL,IAAMmB,EAAwD,8DCKxDC,EAAqD,CAChEC,wBAAyB,iBACzBC,wBAAyB,KACzBC,SAAU,W,8RCuBL,IAAMC,EAAb,WAsBE,WAAYC,EAAoBC,I,4FAA0C,6BAb7D,QAa6D,6BAVhC,IAUgC,2BARlC,IAQkC,sCAH3C,IAKxBD,IAILT,KAAKU,oBAAsBC,OAAOC,OAAOR,EAA+BM,GAExEV,KAAKa,OAASJ,EACbA,EAAcK,aAAed,KAC9BA,KAAKK,wBAA0BU,OAAOf,KAAKU,oBAAoBL,yBAC1DI,EAAcO,kBAInBhB,KAAKiB,YACN,C,UAtCH,O,EAAA,E,EAAA,wBAwCE,WACGjB,KAAKa,OAAeG,kBAAmB,EAExChB,KAAKa,OAAOK,UAAUC,IAAIlC,EAA+B,eACzDe,KAAKa,OAAOK,UAAUC,IAAIlC,EAA+B,UAAH,OAAae,KAAKU,oBAAoBH,WAE5FP,KAAKoB,gBACLpB,KAAKqB,oBACN,GAhDH,2BAkDE,WAEOrB,KAAKa,OAAOS,cAAc,kCAE7B9B,EAAWQ,KAAKa,OAAN,0sBAmBPb,KAAKa,OAAOS,cAAc,yCAE7B9B,EAAWQ,KAAKa,OAAN,kVASb,GApFH,oBAsFE,WACE,IAEMU,EAAQvB,KAAKa,OAAOS,cAAc,4BAEpCC,GACFvB,KAAKwB,WAAa,OAElBxB,KAAKU,oBAAoBe,kBAAoB,KAC7CzB,KAAK0B,mBAAmBH,IAEpBvB,KAAKa,OAAOc,aAAa,2BAC3B3B,KAAK4B,+BAGL5B,KAAKU,oBAAoBe,oBAC3BzB,KAAKwB,WAAa,UAClBxB,KAAKyB,kBAAoBzB,KAAKU,oBAAoBe,kBAClDzB,KAAK6B,oBAAsB7B,KAAKU,oBAAoBe,mBAEtDzB,KAAK8B,wBAnBgB9B,KAoBR+B,wBACd,GA5GH,0CA8GE,WACE,IAAMC,EAAwBhC,KAAKa,OAAOc,aAAa,0BACvD3B,KAAKU,oBAAoBe,kBAAoBQ,KAAKC,MAAMnB,OAAOiB,GAChE,GAjHH,gCAmHE,SAAmBT,GAAoB,WAIrCA,EAAMY,WAAWC,SAAQ,SAACC,GACxB,GAAIA,EAAOC,SAASC,gBAAkB,QAAQA,cAAe,CAG3D,IAAMC,EAASH,EAAOf,cAAc,SAK9BmB,EAA4B,CAChCC,YALgBL,EAAOM,UACUC,QAAQ,cAAe,IAKxDC,MAAO9B,OAAOyB,aAAD,EAACA,EAAQK,OACtBC,cAAeN,SAAAA,EAAQO,QAAU/D,EAAkBgE,QAAUhE,EAAkBiE,WAGjF,EAAKxB,kBAAkByB,KAAKT,GAC5B,EAAKZ,oBAAoBqB,KAAKT,EAC/B,CACF,GACF,GA1IH,gCAkJE,WAAqB,QACb3B,EAAed,KA6FrB,SAASmD,EAAiBC,GACxB,IAAMC,EAAKvC,EAAawC,kBACxB,GAAe,UAAXF,EAAEG,KAAkB,CACtB,GAAIzC,EAAa0C,+BAAiCH,EAAGR,MACnD,OAEF/B,EAAa0C,6BAA+BH,EAAGR,MAC/C/B,EAAa2C,0BAA0B3C,EAAa0C,6BACrD,CACc,UAAXJ,EAAEG,MACJzC,EAAa4C,mBAEA,SAAXN,EAAEG,MAEJzC,EAAa4C,kBAAiB,EAEjC,CA5GD5C,EAAawC,kBAAoBtD,KAAKa,OAAOS,cAAc,yCAC3DR,EAAa6C,kBAAoB3D,KAAKa,OAAOS,cAAc,wCAC3DR,EAAaS,MAAQvB,KAAKa,OAAOS,cAAc,4BAG/CtB,KAAKsD,kBAAkBM,iBAAiB,QAAST,GACjDnD,KAAKsD,kBAAkBM,iBAAiB,OAAQT,GAChDnD,KAAKsD,kBAAkBM,iBAAiB,QAAST,GACjDnD,KAAK2D,kBAAkBC,iBAAiB,SAmCxC,SAAgCR,GAE9B,GAAe,UAAXA,EAAEG,KAAkB,CAGtB,IAEMM,EAAUhE,EADRuD,EAAEU,OACuB,IAAM3E,GACnC4E,EAAuC,KACrCC,EAAYjD,OAAO8C,aAAD,EAACA,EAASlC,aAAa,eACzCsC,EAAezD,EAAgB0D,mBAAmBpD,EAAae,oBAAqBmC,GACtFG,EAAmB3D,EAAgB0D,mBAAmBpD,EAAaW,kBAAmBuC,QAEjEI,IAArBD,IAEFA,EAAmB,CACjB,YAAeN,aAAf,EAAeA,EAASlB,UACxB,MAASkB,aAAT,EAASA,EAASlC,aAAa,cAC/B,cAAiB3C,EAAkBiE,WAGrCnC,EAAaW,kBAAkByB,KAAKiB,IAGlCN,SAAAA,EAAS3C,UAAUmD,SAASnF,IAC9B+E,EAAanB,cAAgB9D,EAAkBiE,UAC/CkB,EAAiBrB,cAAgB9D,EAAkBiE,aAGnDc,EAAwBjD,EAAaW,kBAAkB6C,WAAU,SAAAC,GAAE,OAAIA,EAAG1B,QAAUsB,EAAiBtB,KAAlC,KAEvC/B,EAAaW,kBAAkB+C,OAAS,GAClE1D,EAAaW,kBAAkByB,KAAKpC,EAAaW,kBAAkBgD,OAAOV,EAAuB,GAAG,IAEtGE,EAAanB,cAAgB9D,EAAkBgE,QAC/CmB,EAAiBrB,cAAgB9D,EAAkBgE,SAGrDlC,EAAa4D,wBACb5D,EAAa6D,wBACb7D,EAAaiB,yBACbjB,EAAawC,kBAAkBT,MAAQ,GACvC/B,EAAawC,kBAAkBsB,cAAc,IAAIC,MAAM,UACvD/D,EAAawC,kBAAkBsB,cAAc,IAAIC,MAAM,UACxD,CACF,IA/ED,UAAA7E,KAAKa,cAAL,mBAAaS,cAAc,gDAA3B,SAAqEsC,iBAAiB,SAMtF,SAA0BR,GAExB,GAAe,UAAXA,EAAEG,KAAkB,CACtB,IACMO,EAASjE,EADPuD,EAAEU,OACsB,oCAEhC,GAAIA,EAAQ,CACV,IAAMgB,EAAQhB,EAAO5D,WACf8D,EAAYjD,OAAQ+D,EAAsBnD,aAAa,eAEvDsC,EAAezD,EAAgB0D,mBAAmBpD,EAAae,oBAAsBmC,GACrFG,EAAmB3D,EAAgB0D,mBAAmBpD,EAAaW,kBAAoBuC,GAC7FC,EAAanB,cAAgB9D,EAAkBiE,UAC/CkB,EAAiBrB,cAAgB9D,EAAkBiE,UAEnDnC,EAAa4D,wBACb5D,EAAaiB,yBACbjB,EAAa6D,uBACd,CAGF,CACF,IA0ED3E,KAAK+E,QACN,GApQH,8BAsQE,WAAiC,IAAhBC,IAAgB,yDAEzBC,EAAoBjF,KAAKsD,kBAAkB4B,wBAAwBC,EAAInF,KAAKa,OAAOqE,wBAAwBC,EAE7GH,GACFhF,KAAK2D,kBAAkByB,MAAMC,KAAOJ,EAAoB,KACxDjF,KAAKa,OAAOK,UAAUC,IAAIlC,EAA+B,6BAEzDe,KAAKa,OAAOK,UAAUoE,OAAOrG,EAA+B,2BAE/D,GAhRH,mCA8RE,WAAwB,WAEhBI,EAAWW,KAAK2D,kBAAkBrC,cAAc,+CAGtDjC,SAAAA,EAAU8C,WAAWC,SAAQ,SAAAmD,GAE3B,IAAMvB,EAAYjD,OAAQwE,EAAsB5D,aAAa,eACvDwC,EAAmB3D,EAAgB0D,mBAAmB,EAAKzC,kBAAmBuC,QAG3DI,IAArBD,IACEA,EAAiBrB,gBAAkB9D,EAAkBiE,WACtDsC,EAAsBrE,UAAUoE,OAAOpG,GAEtCiF,EAAiBrB,gBAAkB9D,EAAkBgE,SACtDuC,EAAsBrE,UAAUC,IAAIjC,GAK1C,GAEF,GArTH,mCA0TE,WACE,IAAM4B,EAAed,KAEG,SAApBA,KAAKwB,YAEPpC,EAAkB0B,EAAaS,OAG7BvB,KAAKa,OAAO2E,cAAgBxF,KAAKa,OAAO2E,aAAaC,WACvDzF,KAAKU,oBAAoBgF,iBAAmB1F,KAAKa,OAAO2E,aAAaC,UAEnEzF,KAAKU,oBAAoBgF,kBAC3B1F,KAAKU,oBAAoBgF,iBAAiB1F,KAAKyB,mBAIzB,SAApBzB,KAAKwB,YACPxB,KAAKyB,kBAAkBW,SAAQ,SAAAuD,GAC7BnG,EAAWsB,EAAaS,MAAd,wCAAsDoE,EAAK7C,gBAAkB9D,EAAkBgE,QAAUhE,EAAkBgE,QAAU,GAArI,oCAAmK2C,EAAK9C,MAAxK,aAAkL8C,EAAKjD,YAAvL,YACX,GAEJ,GA/UH,oCAoVE,WACE,IAEMkD,EAFe5F,KAEWa,OAAOS,cAAc,yCACrDlC,EAAkBwG,GAGlB5F,KAAKyB,kBAAkBW,SAAQ,SAAAuD,GACzBA,EAAK7C,gBAAkB9D,EAAkBgE,SAC3CxD,EAAWoG,EAAD,0BAA+CD,EAAK9C,MAApD,6FAC8B8C,EAAKjD,YADnC,2JAQb,GACF,GAtWH,mCA2WE,WAGE,IAAMrD,EAAWW,KAAK2D,kBAAkBrC,cAAc,+CAEtDlC,EAAkBC,GAClBW,KAAK6B,oBAAoBO,SAAQ,SAAAuD,GAC/BnG,EAAWH,EAAD,sEAAyFsG,EAAK7C,gBAAkB9D,EAAkBgE,QAAU9D,EAAmC,GAA/K,yBAAkMyG,EAAK9C,MAAvM,aAAiN8C,EAAKjD,YAAtN,SACX,GACF,GApXH,6CAsXE,SAAgCmD,GACf7F,KAAK2D,kBAAkBmC,iBAAiB,IAAM3G,GACtDiD,SAAQ,SAAC2D,GACd,GAAIA,EAAMpE,aAAa,gBAAkBkE,EACvC,OAAOE,CAEV,GACF,GA7XH,uCAkYE,SAA0BC,GAAwB,WAoBhD,SAASC,EAAsBnF,GAE7BA,EAAae,oBAAoBO,SAAQ,SAAC8D,GACzC,IAED,IAAMC,EAAyBrF,EAAa6C,kBAAkBmC,iBAAiB,IAAM3G,GACrF6G,EAAiBA,EAAezD,cAEhC,IAAI6D,EAAiB,EACrBD,EAAuB/D,SAAQ,SAACiE,GACoB,KAA9CvF,EAAa0C,+BAAwC6C,EAAsBC,aAAe,IAAI/D,cAAcgE,QAAQP,IAAmB,GACzIK,EAAsBnF,UAAUoE,OAAO,aACvCc,KAEAC,EAAsBnF,UAAUC,IAAI,YAEvC,IAEsB,IAAnBiF,EACFtF,EAAa6C,kBAAkBzC,UAAUC,IAAIhB,GAE7CW,EAAa6C,kBAAkBzC,UAAUoE,OAAOnF,EAEnD,CAxCG6F,GAAkBhG,KAAKwD,+BAIvBxD,KAAKU,oBAAoBJ,wBAC1BN,KAAKU,oBAAoBJ,wBAAwBN,KAAMgG,GAAiCQ,MAAK,WAE5FP,EAAsB,EACvB,IAHD,OAGS,SAACQ,GACRC,QAAQC,IAAI,YACZD,QAAQC,IAAIF,EACb,IAEDR,EAAsBjG,MA4BzB,I,EA9aH,iCAmRE,SAA0B4G,EAAgB5C,GAIxC,OAFmB4C,EAAQC,QAAO,SAAClB,GAAD,OAAUA,EAAK9C,QAAUmB,CAAzB,IAEhB,EACnB,I,iFAxRH,MAkbS8C,QAAUC,YAQPC,wBALL,SAA2BC,GAA2D,IAAnCL,EAAmC,uDAAJ,CAAC,EACxF,IAAIpG,EAAgByG,EAAWL,EAEhC,C,GCtdGM,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBhD,IAAjBiD,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CCrBAH,EAAoBM,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEN,EAASK,IAC5EhH,OAAOkH,eAAeP,EAASK,EAAK,CAAEG,YAAY,EAAMC,IAAKL,EAAWC,IAE1E,ECNDR,EAAoBS,EAAI,CAACI,EAAKC,IAAUtH,OAAOuH,UAAUC,eAAeC,KAAKJ,EAAKC,G,k4DCM3E,IAAMI,EAAb,a,qRAAA,U,QAAA,G,EAAA,E,mJAIE,aAAc,O,4FAAA,UAEZ,gBAGKC,OAAS,EAAKC,aAAa,CAACC,KAAM,SAGvC,EAAKC,QAAUC,SAASC,cAAc,OACtC,EAAKF,QAAQG,aAAa,QAAS,6BAEnC,EAAKH,QAAQ9F,UAAb,iDAMA+D,QAAQC,IAAR,MACA,IAAIkC,EAAU,KACVC,EAA+B,KAC/BC,EAAiB,KAErB,EAAK5G,WAAWC,SAAQ,SAACmC,GACK,UAAvBA,EAAWyE,UACdH,EAAUtE,GAEgB,SAAvBA,EAAWyE,UACdF,EAAWvE,EAEd,IAED,IAAM0E,EAAYP,SAASC,cAAc,SA/B7B,OAgCZM,EAAU1F,KAAO,WACjB0F,EAAUC,YAAYR,SAASS,eC3CnC,yuID+CON,KACDE,EAAiBL,SAASC,cAAc,UACzBpF,KAAO,WACtBwF,EAAeG,YAAYL,IAK7B,EAAKP,OAAOY,YAAY,EAAKT,SAC7B,EAAKH,OAAOY,YAAYD,GACrBF,GACD,EAAKT,OAAOY,YAAYH,GAEvBD,IACAA,EAAyBF,aAAa,OAAQ7H,OAAQ+H,EAAyBnH,aAAa,oBAC7F,EAAK2G,OAAOY,YAAYJ,IApDd,CAwDb,CA5DH,O,EAAA,G,EAAA,8BA8DE,WACEpC,QAAQC,IAAI,sBAGZ,IAAMyC,EAAgBpJ,KAAKyI,QAAQnH,cAAc,sBAIjD,GAHC8H,EAAsB5D,aAAexF,KAGlCoJ,EAAe,CAEjB,IAAM1I,EAA2C,CAAC,EAE5CsB,EAAwBhC,KAAK2B,aAAa,0BAChDjB,EAAoBe,kBAAoBQ,KAAKC,MAAMnB,OAAOiB,IAC1DtB,EAAoBgF,iBAAmB,SAAC2D,GACtC,IAAMC,EAAkBD,EAAWxC,QAAO,SAACtC,GAAD,MAA+C,YAArBA,EAAGzB,aAA7B,IAC1C4D,QAAQC,IAAI,CAAC2C,gBAAAA,GACd,EAUD,IAAI9I,EAAAA,EAAgBR,KAAKyI,QAAQnH,cAAc,sBAAsCZ,EACtF,CACF,GA3FH,+BAgGE,WACEgG,QAAQC,IAAI,uBACZ3G,KAAKuJ,iBAEN,M,oEApGH,KAA4CC,cAyG5CC,eAAeC,OAAO,oBAAqBrB,E","sources":["webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector.config.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.type.ts","webpack://chip-selector/./src/dzs-chip-selector/js_common/dzs_helpers.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.config.ts","webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector--defaultOptions.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.ts","webpack://chip-selector/webpack/bootstrap","webpack://chip-selector/webpack/runtime/define property getters","webpack://chip-selector/webpack/runtime/hasOwnProperty shorthand","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector--web-components.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.scss"],"sourcesContent":["/**\n * the default class name\n */\nexport const DZS_CHIP_SELECTOR_CLASS_NAME = 'dzs-chip-selector';\nexport const DZS_CHIP_SELECTOR_CHIPS_SELECTED = 'is-selected';\nexport const DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS = 'dzs-chip-selector--autocompletelist--items--item';\nexport const DZS_CHIP_SELECTOR_CHIPS_CLOSE = 'dzs-chip-selector--item--remove';","\nexport type ChipSelectorOptions = {\n  placeholderNoItemsFound?: string,\n  middlewareFilterResults?: any,\n  viewSkin?: string,\n  onUpdateFunction?: (...args: any[]) => any;\n  persistentOptions?: ChipSelectorItem[]\n};\n\n\nexport type ChipSelectorItem = {\n  htmlContent: string,\n  value: string,\n  currentStatus: string\n};\n\nexport enum currentStatusType {\n  CHECKED = 'checked',\n  UNCHECKED = 'unchecked',\n}","export function domRemoveChildren($ulItems: HTMLElement): void {\n\n  while ($ulItems.firstChild) {\n    $ulItems.removeChild($ulItems.firstChild);\n  }\n}\n\nexport function insertHtml(t: HTMLElement, html: string, position = 'beforeend'): void{\n\n  t.insertAdjacentHTML(<\"beforebegin\" | \"afterbegin\" | \"beforeend\" | \"afterend\">position, html);\n}\n\nexport function matchSelector(t: HTMLElement, sel: string): null | HTMLElement {\n\n  let matchedEl = null;\n  // @ts-ignore\n  while (t && t !== (this as any)) {\n    if (t && t.matches) {\n      if (t.matches(sel)) {\n        matchedEl = t;\n        break;\n      }\n      t = t.parentNode as HTMLElement;\n    } else {\n      break;\n    }\n  }\n\n  return matchedEl;\n\n}","export const DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE = 'dzs-chip-selector--autocompletelist--is-placeholder-visible'","/**\n * the default class name\n */\nimport { ChipSelectorOptions} from \"../dzs-chip-selector.type\";\n\nexport const dzsChipSelectorDefaultOptions: ChipSelectorOptions = {\n  placeholderNoItemsFound: \"No items found\",\n  middlewareFilterResults: null,\n  viewSkin: 'default',\n};","import {\n  DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS,\n  DZS_CHIP_SELECTOR_CHIPS_CLOSE,\n  DZS_CHIP_SELECTOR_CHIPS_SELECTED,\n  DZS_CHIP_SELECTOR_CLASS_NAME\n} from \"./config/dzs-chip-selector.config\";\nimport {domRemoveChildren, insertHtml, matchSelector} from \"./js_common/dzs_helpers\";\nimport {ChipSelectorItem, ChipSelectorOptions, currentStatusType} from \"./dzs-chip-selector.type\";\nimport {DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE} from \"./dzs-chip-selector.config\";\nimport {dzsChipSelectorDefaultOptions} from \"./config/dzs-chip-selector--defaultOptions\";\n// import {$es} from '../../deps/esjquery/js/_esjquery';\n\n\ndeclare global {\n  interface Window {\n    dzs_initDzsChipSelector: ($argChip_: HTMLElement, options?: ChipSelectorOptions) => void;\n  }\n\n  interface HTMLElement {\n    webComponent?: any;\n  }\n}\n\n\n// todo: temp\n// type esJquery = {\n//\n//   addClass: (arg:string) => {}\n//   find: (arg:string) => esJquery\n// };\n\nexport class DzsChipSelector {\n  /** DOM - main element wrapper */\n  $elem_!: HTMLElement;\n  $inputNewElement_!: HTMLInputElement;\n  $autoCompleteList!: HTMLElement;\n  $form!: HTMLElement;\n  // $elem: esJquery;\n  // $inputNewElement: esJquery;\n\n  feedSource = 'form';\n\n  /** single source of truth -- filtered by keyboard */\n  autoCompleteOptions: ChipSelectorItem[] = [];\n  /** single source of truth */\n  persistentOptions: ChipSelectorItem[] = [];\n  placeholderNoItemsFound!: string;\n  /** config options */\n  chipSelectorOptions!: ChipSelectorOptions;\n\n  inputForm_currentQueryString = '';\n\n\n  constructor($elem: HTMLElement, chipSelectorOptions: ChipSelectorOptions) {\n\n    if (!$elem) {\n      return;\n    }\n\n    this.chipSelectorOptions = Object.assign(dzsChipSelectorDefaultOptions, chipSelectorOptions);\n\n    this.$elem_ = $elem;\n    ($elem as any).selfInstance = this;\n    this.placeholderNoItemsFound = String(this.chipSelectorOptions.placeholderNoItemsFound);\n    if (($elem as any).isDzsChipsInited) {\n      return;\n    }\n\n    this.initClass()\n  }\n\n  initClass() {\n    (this.$elem_ as any).isDzsChipsInited = true;\n\n    this.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-inited');\n    this.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + `--skin-${this.chipSelectorOptions.viewSkin}`);\n\n    this.initStructure();\n    this.initAfterStructure();\n  }\n\n  initStructure() {\n\n    if (!this.$elem_.querySelector('.dzs-chip-selector--container')) {\n\n      insertHtml(this.$elem_, `<div class=\"dzs-chip-selector--container\">\n          <div class=\"dzs-chip-selector--form-field\">\n            <div class=\"dzs-chip-selector--chip-list\">\n              <ul class=\"dzs-chip-selector--chip-list-wrapper\">\n\n              </ul>\n            </div>\n            <label class=\"dzs-chip-selector--input-new-element--label\">\n              <input placeholder=\"New fruit...\" class=\"dzs-chip-selector--input-new-element\"\n                     autocomplete=\"off\"\n                     role=\"combobox\" aria-autocomplete=\"list\" aria-expanded=\"false\"\n                     aria-haspopup=\"listbox\"\n                     aria-owns=\"mat-autocomplete-1\">\n            </label>\n          </div>\n        </div>`)\n\n    }\n\n    if (!this.$elem_.querySelector('.dzs-chip-selector--autocompletelist')) {\n\n      insertHtml(this.$elem_, `<div class=\"dzs-chip-selector--autocompletelist\">\n          <div class=\"dzs-chip-selector--autocompletelist--inner\">\n            <div class=\"dzs-chip-selector--autocompletelist--placeholder\">No items found</div>\n            <ul class=\"dzs-chip-selector--autocompletelist--items\">\n            </ul>\n          </div>\n        </div>`)\n\n    }\n  }\n\n  reinit() {\n    const selfInstance = this;\n\n    const $form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLElement;\n\n    if ($form) {\n      this.feedSource = 'form';\n      // @ts-ignore\n      this.chipSelectorOptions.persistentOptions = null;\n      this.getOptionsFromForm($form);\n    } else {\n      if (this.$elem_.getAttribute('data-persistentOptions')) {\n        this.readAttrForPersistentOptions();\n      }\n    }\n    if (this.chipSelectorOptions.persistentOptions) {\n      this.feedSource = 'options';\n      this.persistentOptions = this.chipSelectorOptions.persistentOptions;\n      this.autoCompleteOptions = this.chipSelectorOptions.persistentOptions;\n    }\n    this.createListFromOptions();\n    selfInstance.updateChipsFromOptions();\n  }\n\n  readAttrForPersistentOptions() {\n    const dataPersistentOptions = this.$elem_.getAttribute('data-persistentOptions');\n    this.chipSelectorOptions.persistentOptions = JSON.parse(String(dataPersistentOptions));\n  }\n\n  getOptionsFromForm($form: HTMLElement) {\n\n    // -- parse main form\n    // @ts-ignore\n    $form.childNodes.forEach(($label: HTMLElement) => {\n      if ($label.nodeName.toLowerCase() === 'LABEL'.toLowerCase()) {\n\n\n        const $input = $label.querySelector('input');\n        const labelHtml = $label.innerHTML;\n        const labelHtmlCurated = labelHtml.replace(/<input.*?>/g, '');\n\n\n        const newItem: ChipSelectorItem = {\n          htmlContent: labelHtmlCurated,\n          value: String($input?.value),\n          currentStatus: $input?.checked ? currentStatusType.CHECKED : currentStatusType.UNCHECKED\n        };\n\n        this.persistentOptions.push(newItem);\n        this.autoCompleteOptions.push(newItem);\n      }\n    })\n  }\n\n\n  /**\n   init--\n   initAfterStructure--\n   reinit--\n   */\n  initAfterStructure() {\n    const selfInstance = this;\n    selfInstance.$inputNewElement_ = this.$elem_.querySelector('.dzs-chip-selector--input-new-element') as HTMLInputElement;\n    selfInstance.$autoCompleteList = this.$elem_.querySelector('.dzs-chip-selector--autocompletelist') as HTMLInputElement;\n    selfInstance.$form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLInputElement;\n\n\n    this.$inputNewElement_.addEventListener('focus', handleInputEvent);\n    this.$inputNewElement_.addEventListener('blur', handleInputEvent);\n    this.$inputNewElement_.addEventListener('keyup', handleInputEvent);\n    this.$autoCompleteList.addEventListener('click', handleAutoCompleteList);\n    this.$elem_?.querySelector('.dzs-chip-selector--chip-list-wrapper')?.addEventListener('click', handleChipsClick);\n\n\n    /**\n     * clicks on a chip\n     */\n    function handleChipsClick(e: Event) {\n\n      if (e.type === 'click') {\n        let t = e.target as HTMLElement;\n        const target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_CHIPS_CLOSE);\n\n        if (target) {\n          const $chip = target.parentNode;\n          const dataValue = String(($chip as HTMLElement).getAttribute('data-value'));\n\n          const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, (dataValue));\n          const persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, (dataValue));\n          targetOption.currentStatus = currentStatusType.UNCHECKED;\n          persistentOption.currentStatus = currentStatusType.UNCHECKED;\n\n          selfInstance.updateListFromOptions();\n          selfInstance.updateChipsFromOptions();\n          selfInstance.updateFormFromOptions();\n        }\n\n\n      }\n    }\n\n\n    /**\n     * clicks on list\n     */\n    function handleAutoCompleteList(e: Event) {\n\n      if (e.type === 'click') {\n\n\n        const sel = '';\n        let t = e.target as HTMLElement;\n        const $target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n        let persistentOptionIndex: number | null = null;\n        const dataValue = String($target?.getAttribute('data-value'));\n        const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, dataValue);\n        let persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, dataValue);\n\n        if (persistentOption === undefined) {\n\n          persistentOption = {\n            \"htmlContent\": $target?.innerHTML,\n            \"value\": $target?.getAttribute('data-value'),\n            \"currentStatus\": currentStatusType.UNCHECKED\n          }\n\n          selfInstance.persistentOptions.push(persistentOption);\n        }\n\n        if ($target?.classList.contains(DZS_CHIP_SELECTOR_CHIPS_SELECTED)) {\n          targetOption.currentStatus = currentStatusType.UNCHECKED;\n          persistentOption.currentStatus = currentStatusType.UNCHECKED;\n        } else {\n          // -- turn to checked\n          persistentOptionIndex = selfInstance.persistentOptions.findIndex(el => el.value === persistentOption.value);\n          // -- move to end of array\n          if (persistentOptionIndex < selfInstance.persistentOptions.length - 1) {\n            selfInstance.persistentOptions.push(selfInstance.persistentOptions.splice(persistentOptionIndex, 1)[0]);\n          }\n          targetOption.currentStatus = currentStatusType.CHECKED;\n          persistentOption.currentStatus = currentStatusType.CHECKED;\n        }\n\n        selfInstance.updateListFromOptions();\n        selfInstance.updateFormFromOptions();\n        selfInstance.updateChipsFromOptions();\n        selfInstance.$inputNewElement_.value = '';\n        selfInstance.$inputNewElement_.dispatchEvent(new Event('keyup'));\n        selfInstance.$inputNewElement_.dispatchEvent(new Event('change'));\n      }\n    }\n\n    // selfInstance.$inputNewElement.addEventListener()\n\n    function handleInputEvent(e: Event) {\n      const $t = selfInstance.$inputNewElement_;\n      if (e.type === 'keyup') {\n        if (selfInstance.inputForm_currentQueryString === $t.value) {\n          return;\n        }\n        selfInstance.inputForm_currentQueryString = $t.value;\n        selfInstance.autoCompleteFilterResults(selfInstance.inputForm_currentQueryString);\n      }\n      if (e.type === 'focus') {\n        selfInstance.onInputAreaFocus();\n      }\n      if (e.type === 'blur') {\n\n        selfInstance.onInputAreaFocus(false);\n      }\n    }\n\n\n    this.reinit();\n  }\n\n  onInputAreaFocus(isFocus = true) {\n\n    const autocompleteListX = this.$inputNewElement_.getBoundingClientRect().x - this.$elem_.getBoundingClientRect().x;\n\n    if (isFocus) {\n      this.$autoCompleteList.style.left = autocompleteListX + 'px';\n      this.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    } else {\n      this.$elem_.classList.remove(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    }\n  }\n\n\n  static getOptionFromValue(options: any[], dataValue: string) {\n\n    const foundItems = options.filter((item) => item.value === dataValue);\n\n    return foundItems[0];\n  }\n\n\n  /**\n   * updates from single source of truth this.$autoCompleteList -- .dzs-chip-selector--autocompletelist--items\n   */\n  updateListFromOptions() {\n\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n\n    $ulItems?.childNodes.forEach(child => {\n\n      const dataValue = String((child as HTMLElement).getAttribute('data-value'));\n      const persistentOption = DzsChipSelector.getOptionFromValue(this.persistentOptions, dataValue);\n\n\n      if (persistentOption !== undefined) {\n        if (persistentOption.currentStatus === currentStatusType.UNCHECKED) {\n          (child as HTMLElement).classList.remove(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n        if (persistentOption.currentStatus === currentStatusType.CHECKED) {\n          (child as HTMLElement).classList.add(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n      }\n\n\n    })\n\n  }\n\n  /**\n   * updates the DOM -> FORM from single source of truth this.$autoCompleteList\n   */\n  updateFormFromOptions() {\n    const selfInstance = this;\n\n    if (this.feedSource === 'form') {\n\n      domRemoveChildren(selfInstance.$form);\n    }\n\n    if (this.$elem_.webComponent && this.$elem_.webComponent.onUpdate) {\n      this.chipSelectorOptions.onUpdateFunction = this.$elem_.webComponent.onUpdate;\n    }\n    if (this.chipSelectorOptions.onUpdateFunction) {\n      this.chipSelectorOptions.onUpdateFunction(this.persistentOptions);\n    }\n\n\n    if (this.feedSource === 'form') {\n      this.persistentOptions.forEach(item => {\n        insertHtml(selfInstance.$form, `<label><input type=\"checkbox\" ${item.currentStatus === currentStatusType.CHECKED ? currentStatusType.CHECKED : ''} name=\"subject[]\" value=\"${item.value}\">${item.htmlContent}</label>`)\n      })\n    }\n  }\n\n  /**\n   * updates from single source of truth this.$autoCompleteList\n   */\n  updateChipsFromOptions() {\n    const selfInstance = this;\n\n    const $chipsList = selfInstance.$elem_.querySelector('.dzs-chip-selector--chip-list-wrapper');\n    domRemoveChildren($chipsList as HTMLElement);\n\n\n    this.persistentOptions.forEach(item => {\n      if (item.currentStatus === currentStatusType.CHECKED) {\n        insertHtml($chipsList as HTMLElement, `<li data-value=\"${item.value}\" class=\"dzs-chip-selector--item\">\n<div class=\"dzs-chip-selector--item--content\">${item.htmlContent}</div>\n<button _ngcontent-mua-c151=\"\" matchipremove=\"\" class=\"dzs-chip-selector--item--remove\"  type=\"button\">\n  <figure>x</figure>\n</button>\n</li>`)\n\n      }\n    })\n  }\n\n  /**\n   * create the list from currentItems\n   */\n  createListFromOptions() {\n\n    // todo: wrong, find suggestedItems\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n    domRemoveChildren($ulItems as HTMLElement);\n    this.autoCompleteOptions.forEach(item => {\n      insertHtml($ulItems as HTMLElement, `<li class=\"dzs-chip-selector--autocompletelist--items--item ${item.currentStatus === currentStatusType.CHECKED ? DZS_CHIP_SELECTOR_CHIPS_SELECTED : ''}\" data-value=\"${item.value}\">${item.htmlContent}</li>`);\n    })\n  }\n\n  getAutocompleteItemDomFromValue(arg: string) {\n    const $items = this.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n    $items.forEach(($item) => {\n      if ($item.getAttribute('data-value') === arg) {\n        return $item;\n      }\n    })\n  }\n\n  /**\n   * filter on each letter\n   */\n  autoCompleteFilterResults(stringSequence: string) {\n\n\n    if (stringSequence != this.inputForm_currentQueryString) {\n      return;\n    }\n\n    if (this.chipSelectorOptions.middlewareFilterResults) {\n      (this.chipSelectorOptions.middlewareFilterResults(this, stringSequence) as Promise<any>).then(() => {\n\n        filterResultsFrontend(this);\n      }).catch((err) => {\n        console.log('error - ');\n        console.log(err)\n      });\n    } else {\n      filterResultsFrontend(this);\n    }\n\n\n    function filterResultsFrontend(selfInstance: DzsChipSelector) {\n\n      selfInstance.autoCompleteOptions.forEach((autocompleteOption) => {\n      })\n\n      const $autoCompleteListItems = selfInstance.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n      stringSequence = stringSequence.toLowerCase();\n\n      let nrResultsFound = 0;\n      $autoCompleteListItems.forEach(($autoCompleteListItem) => {\n        if (selfInstance.inputForm_currentQueryString === '' || ($autoCompleteListItem.textContent || '').toLowerCase().indexOf(stringSequence) > -1) {\n          $autoCompleteListItem.classList.remove('is-hidden');\n          nrResultsFound++;\n        } else {\n          $autoCompleteListItem.classList.add('is-hidden');\n        }\n      })\n\n      if (nrResultsFound === 0) {\n        selfInstance.$autoCompleteList.classList.add(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      } else {\n        selfInstance.$autoCompleteList.classList.remove(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      }\n    }\n  }\n}\n\nfunction getWindow() {\n  return window || globalThis as any;\n}\n\nexport function init_chipSelector($argChip_: HTMLElement, options: ChipSelectorOptions = {}) {\n  new DzsChipSelector($argChip_, options);\n\n}\n\ngetWindow().dzs_initDzsChipSelector = init_chipSelector;\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// Create a class for the element\nimport {ChipSelectorItem, ChipSelectorOptions} from \"./dzs-chip-selector.type\";\nimport {DzsChipSelector} from \"./dzs-chip-selector\";\nimport styleChipTextContent from './dzs-chip-selector.scss';\n\n\nexport class DzsChipSelectorWrapper extends HTMLElement {\n  shadow: ShadowRoot;\n  wrapper: HTMLElement;\n\n  constructor() {\n    // Always call super first in constructor\n    super();\n\n    // Create a shadow root\n    this.shadow = this.attachShadow({mode: 'open'});\n\n    // Create spans\n    this.wrapper = document.createElement('div');\n    this.wrapper.setAttribute('class', 'dzs-chip-selector-wrapper');\n\n    this.wrapper.innerHTML = `<div class=\"dzs-chip-selector\" >\n      </div>`;\n\n\n    // Create some CSS to apply to the shadow dom\n\n    console.log(this);\n    let skinCss = null;\n    let skinLink: HTMLElement | null = null;\n    let styleChipInner = null;\n\n    this.childNodes.forEach((el) => {\n      if ((el as any).tagName === 'STYLE') {\n        skinCss = el;\n      }\n      if ((el as any).tagName === 'LINK') {\n        skinLink = el as HTMLElement;\n      }\n    });\n\n    const styleChip = document.createElement('style');\n    styleChip.type = 'text/css';\n    styleChip.appendChild(document.createTextNode(styleChipTextContent));\n\n\n\n    if(skinCss){\n      styleChipInner = document.createElement('style');\n      styleChipInner.type = 'text/css';\n      styleChipInner.appendChild(skinCss);\n    }\n\n\n    // Attach the created elements to the shadow dom\n    this.shadow.appendChild(this.wrapper);\n    this.shadow.appendChild(styleChip);\n    if(styleChipInner){\n      this.shadow.appendChild(styleChipInner);\n    }\n    if(skinLink){\n      (skinLink as HTMLElement).setAttribute('href', String((skinLink as HTMLElement).getAttribute('data-lazy-href')));\n      this.shadow.appendChild(skinLink);\n    }\n\n\n  }\n\n  renderComponent() {\n    console.log('rendered component');\n\n\n    const $chipSelector = this.wrapper.querySelector('.dzs-chip-selector');\n    ($chipSelector as any).webComponent = this;\n\n\n    if ($chipSelector) {\n\n      const chipSelectorOptions: ChipSelectorOptions = {};\n\n      const dataPersistentOptions = this.getAttribute('data-persistentOptions');\n      chipSelectorOptions.persistentOptions = JSON.parse(String(dataPersistentOptions));\n      chipSelectorOptions.onUpdateFunction = (allOptions: ChipSelectorItem[]) => {\n        const selectedOptions = allOptions.filter((el: ChipSelectorItem) => el.currentStatus === 'checked');\n        console.log({selectedOptions});\n      };\n      // chipSelectorOptions.viewSkin = 'alceva';\n\n      // setTimeout(()=>{\n      //\n      //   import('./style/skins/skin-default.scss').then((ar)=>{\n      //     console.log(ar)\n      //   }) ;\n      // },1000);\n\n      new DzsChipSelector(this.wrapper.querySelector('.dzs-chip-selector') as HTMLElement, chipSelectorOptions);\n    }\n  }\n\n  /**\n   * called on connected\n   */\n  connectedCallback() {\n    console.log('connectedCallback()');\n    this.renderComponent();\n\n  }\n\n}\n\n// Define the new element\ncustomElements.define('dzs-chip-selector', DzsChipSelectorWrapper);\n\n/**\n * returns the sum\n */\nexport function ceva(arg: number): number {\n\n  return arg;\n}","export default \".dzs-chip-selector{position:relative}.dzs-chip-selector .dzs-chip-selector--container{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%;background-color:rgba(0,0,0,.0392156863);border-radius:5px;padding:10px}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--chip-list ul.dzs-chip-selector--chip-list-wrapper{margin:0;padding:0;display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--chip-list ul.dzs-chip-selector--chip-list-wrapper .dzs-chip-selector--item{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:5px;align-items:center;cursor:default;min-height:32px;height:1px;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px;background-color:#e0e0e0;color:rgba(0,0,0,.8705882353)}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--item--remove{order:none;appearance:none;border:0;-moz-appearance:none;padding:0;background:none;margin-left:8px;margin-right:0;color:rgba(0,0,0,.8705882353);opacity:.4;width:18px;height:18px;cursor:pointer;position:relative}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--item--remove>figure{position:absolute;top:50%;left:50%;margin:0;transform:translate3d(-50%, -50%, 0)}.dzs-chip-selector--input-new-element{font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box;appearance:none;width:150px;margin:4px;flex:1 0 150px}.dzs-chip-selector--input-new-element--label{margin-left:4px;margin-bottom:0}.dzs-chip-selector.dzs-chip-selector--is-new-element-focused .dzs-chip-selector--autocompletelist{opacity:1;visibility:visible}.dzs-chip-selector--autocompletelist{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000;display:block;max-width:100%;max-height:100%;opacity:0;visibility:hidden;transition-property:visibility,opacity;transition-duration:.1s;transition-timing-function:ease-out}.dzs-chip-selector--autocompletelist--inner{padding:5px;border-radius:5px;padding:10px;background-color:#dadada;top:11px;position:relative}.dzs-chip-selector--autocompletelist .dzs-chip-selector--autocompletelist--placeholder{display:none}.dzs-chip-selector--autocompletelist.dzs-chip-selector--autocompletelist--is-placeholder-visible .dzs-chip-selector--autocompletelist--placeholder{display:block}.dzs-chip-selector--autocompletelist.dzs-chip-selector--autocompletelist--is-placeholder-visible ul.dzs-chip-selector--autocompletelist--items{display:none}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items{margin:0;padding:0;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px;list-style:none;list-style:none}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items .dzs-chip-selector--autocompletelist--items--item{width:100%;border-bottom:1px solid rgba(0,0,0,.1);cursor:pointer;padding:5px;transition-property:background-color;transition-duration:.3s;transition-timing-function:ease-out}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items .dzs-chip-selector--autocompletelist--items--item.is-hidden{display:none}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items .dzs-chip-selector--autocompletelist--items--item:last-child{border-bottom:0}.dzs-chip-selector{opacity:1}.dzs-chip-selector .dzs-chip-selector--autocompletelist--inner{opacity:1;transition-property:opacity;transition-duration:.3s;transition-timing-function:ease-out}.dzs-chip-selector.dzs-chip-selector--is-autocomplete-list-loading .dzs-chip-selector--autocompletelist--inner{opacity:.7;visibility:visible}\";"],"names":["currentStatusType","DZS_CHIP_SELECTOR_CLASS_NAME","DZS_CHIP_SELECTOR_CHIPS_SELECTED","DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS","domRemoveChildren","$ulItems","firstChild","removeChild","insertHtml","t","html","position","insertAdjacentHTML","matchSelector","sel","matchedEl","this","matches","parentNode","DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE","dzsChipSelectorDefaultOptions","placeholderNoItemsFound","middlewareFilterResults","viewSkin","DzsChipSelector","$elem","chipSelectorOptions","Object","assign","$elem_","selfInstance","String","isDzsChipsInited","initClass","classList","add","initStructure","initAfterStructure","querySelector","$form","feedSource","persistentOptions","getOptionsFromForm","getAttribute","readAttrForPersistentOptions","autoCompleteOptions","createListFromOptions","updateChipsFromOptions","dataPersistentOptions","JSON","parse","childNodes","forEach","$label","nodeName","toLowerCase","$input","newItem","htmlContent","innerHTML","replace","value","currentStatus","checked","CHECKED","UNCHECKED","push","handleInputEvent","e","$t","$inputNewElement_","type","inputForm_currentQueryString","autoCompleteFilterResults","onInputAreaFocus","$autoCompleteList","addEventListener","$target","target","persistentOptionIndex","dataValue","targetOption","getOptionFromValue","persistentOption","undefined","contains","findIndex","el","length","splice","updateListFromOptions","updateFormFromOptions","dispatchEvent","Event","$chip","reinit","isFocus","autocompleteListX","getBoundingClientRect","x","style","left","remove","child","webComponent","onUpdate","onUpdateFunction","item","$chipsList","arg","querySelectorAll","$item","stringSequence","filterResultsFrontend","autocompleteOption","$autoCompleteListItems","nrResultsFound","$autoCompleteListItem","textContent","indexOf","then","err","console","log","options","filter","window","globalThis","dzs_initDzsChipSelector","$argChip_","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","DzsChipSelectorWrapper","shadow","attachShadow","mode","wrapper","document","createElement","setAttribute","skinCss","skinLink","styleChipInner","tagName","styleChip","appendChild","createTextNode","$chipSelector","allOptions","selectedOptions","renderComponent","HTMLElement","customElements","define"],"sourceRoot":""}