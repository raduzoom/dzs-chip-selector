{"version":3,"file":"dzsChipSelectorWebComponents.js","mappings":"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","sources":["webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector.config.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.type.ts","webpack://chip-selector/./src/dzs-chip-selector/js_common/dzs_helpers.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.config.ts","webpack://chip-selector/./src/dzs-chip-selector/config/dzs-chip-selector--defaultOptions.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorHandlers.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorHelpers.ts","webpack://chip-selector/./src/dzs-chip-selector/jsinc/chipSelectorViewConstructStructure.ts","webpack://chip-selector/webpack/bootstrap","webpack://chip-selector/webpack/runtime/define property getters","webpack://chip-selector/webpack/runtime/hasOwnProperty shorthand","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector--web-components.ts","webpack://chip-selector/./src/dzs-chip-selector/dzs-chip-selector.scss"],"sourcesContent":["/**\n * the default class name\n */\nexport const DZS_CHIP_SELECTOR_CLASS_NAME = 'dzs-chip-selector';\nexport const DZS_CHIP_SELECTOR_CHIPS_SELECTED = 'is-selected';\nexport const DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS = 'dzs-chip-selector--autocompletelist--items--item';\nexport const DZS_CHIP_SELECTOR_CHIPS_CLOSE = 'dzs-chip-selector--item--remove';\nexport const DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT = 'dzs-chip-selector--overflow-tooltip';","\nexport type ChipSelectorOptions = {\n  placeholderNoItemsFound?: string,\n  middlewareFilterResults?: any,\n  viewSkin?: string,\n  onUpdateFunction?: (...args: any[]) => any;\n  viewIsWrapping?: any,\n  persistentOptions?: ChipSelectorItem[]\n};\n\n\nexport type ChipSelectorItem = {\n  htmlContent: string,\n  value: string,\n  currentStatus: string\n};\n\nexport enum currentStatusType {\n  CHECKED = 'checked',\n  UNCHECKED = 'unchecked',\n}","export function domRemoveChildren($ulItems: HTMLElement): void {\n\n  while ($ulItems.firstChild) {\n    $ulItems.removeChild($ulItems.firstChild);\n  }\n}\n\nexport function insertHtml(t: HTMLElement, html: string, position = 'beforeend'): void{\n\n  t.insertAdjacentHTML(<\"beforebegin\" | \"afterbegin\" | \"beforeend\" | \"afterend\">position, html);\n}\n\n\nexport function getComputedProp(el: HTMLElement, cssProp = \"min-width\", isGetAsNumber = false): number | string\n{\n  console.log(el);\n  console.trace();\n  const val = window.getComputedStyle(el,null).getPropertyValue(cssProp);\n  return isGetAsNumber ? parseFloat(val) : val;\n}\nexport function detectRegexPairs(str: string){\n  let regExp = /dzs-chip-selector--skin-(.*?)( |$)/g;\n  let match;\n  const matches = [];\n\n  while ((match = regExp.exec(str)) !== null) {\n    matches.push(match);\n  }\n\n  return matches;\n\n\n}\n\nexport function matchSelector(t: HTMLElement, sel: string): null | HTMLElement {\n\n  let matchedEl = null;\n  // @ts-ignore\n  while (t && t !== (this as any)) {\n    if (t && t.matches) {\n      if (t.matches(sel)) {\n        matchedEl = t;\n        break;\n      }\n      t = t.parentNode as HTMLElement;\n    } else {\n      break;\n    }\n  }\n\n  return matchedEl;\n\n}","export const DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE = 'dzs-chip-selector--autocompletelist--is-placeholder-visible'","/**\n * the default class name\n */\nimport { ChipSelectorOptions} from \"../dzs-chip-selector.type\";\n\n\n// -- 1 level, 2 level warning shallow copy\nexport const dzsChipSelectorDefaultOptions: ChipSelectorOptions = {\n  placeholderNoItemsFound: \"No items found\",\n  middlewareFilterResults: null,\n  viewSkin: 'default',\n  viewIsWrapping: true,\n};","import {matchSelector} from \"../js_common/dzs_helpers\";\nimport {\n  DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS,\n  DZS_CHIP_SELECTOR_CHIPS_CLOSE, DZS_CHIP_SELECTOR_CHIPS_SELECTED\n} from \"../config/dzs-chip-selector.config\";\nimport {currentStatusType} from \"../dzs-chip-selector.type\";\nimport {DzsChipSelector} from \"../dzs-chip-selector\";\n\n\nexport function setupHandlers(selfInstance: DzsChipSelector) {\n\n\n  selfInstance.$inputNewElement_.addEventListener('focus', handleInputEvent);\n  selfInstance.$inputNewElement_.addEventListener('blur', handleInputEvent);\n  selfInstance.$inputNewElement_.addEventListener('keyup', handleInputEvent);\n  selfInstance.$autoCompleteList.addEventListener('click', handleAutoCompleteList);\n  selfInstance.$elem_?.querySelector('.dzs-chip-selector--chip-list-wrapper')?.addEventListener('click', handleChipsClick);\n\n\n  /**\n   * clicks on a chip\n   */\n  function handleChipsClick(e: Event) {\n\n    if (e.type === 'click') {\n      let t = e.target as HTMLElement;\n      const target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_CHIPS_CLOSE);\n\n      if (target) {\n        const $chip = target.parentNode;\n        const dataValue = String(($chip as HTMLElement).getAttribute('data-value'));\n\n        const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, (dataValue));\n        const persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, (dataValue));\n        targetOption.currentStatus = currentStatusType.UNCHECKED;\n        persistentOption.currentStatus = currentStatusType.UNCHECKED;\n\n        selfInstance.updateListFromOptions();\n        selfInstance.updateChipsFromOptions();\n        selfInstance.updateFormFromOptions();\n      }\n\n\n    }\n  }\n\n\n  /**\n   * clicks on list\n   */\n  function handleAutoCompleteList(e: Event) {\n\n    if (e.type === 'click') {\n\n\n      const sel = '';\n      let t = e.target as HTMLElement;\n      const $target = matchSelector(t, '.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n      let persistentOptionIndex: number | null = null;\n      const dataValue = String($target?.getAttribute('data-value'));\n      const targetOption = DzsChipSelector.getOptionFromValue(selfInstance.autoCompleteOptions, dataValue);\n      let persistentOption = DzsChipSelector.getOptionFromValue(selfInstance.persistentOptions, dataValue);\n\n      if (persistentOption === undefined) {\n\n        persistentOption = {\n          \"htmlContent\": $target?.innerHTML,\n          \"value\": $target?.getAttribute('data-value'),\n          \"currentStatus\": currentStatusType.UNCHECKED\n        }\n\n        selfInstance.persistentOptions.push(persistentOption);\n      }\n\n      if ($target?.classList.contains(DZS_CHIP_SELECTOR_CHIPS_SELECTED)) {\n        targetOption.currentStatus = currentStatusType.UNCHECKED;\n        persistentOption.currentStatus = currentStatusType.UNCHECKED;\n      } else {\n        // -- turn to checked\n        persistentOptionIndex = selfInstance.persistentOptions.findIndex(el => el.value === persistentOption.value);\n        // -- move to end of array\n        if (persistentOptionIndex < selfInstance.persistentOptions.length - 1) {\n          selfInstance.persistentOptions.push(selfInstance.persistentOptions.splice(persistentOptionIndex, 1)[0]);\n        }\n        targetOption.currentStatus = currentStatusType.CHECKED;\n        persistentOption.currentStatus = currentStatusType.CHECKED;\n      }\n\n      selfInstance.updateListFromOptions();\n      selfInstance.updateFormFromOptions();\n      selfInstance.updateChipsFromOptions();\n      selfInstance.$inputNewElement_.value = '';\n      selfInstance.$inputNewElement_.dispatchEvent(new Event('keyup'));\n      selfInstance.$inputNewElement_.dispatchEvent(new Event('change'));\n\n\n    }\n  }\n\n  // selfInstance.$inputNewElement.addEventListener()\n\n  function handleInputEvent(e: Event) {\n    const $t = selfInstance.$inputNewElement_;\n    if (e.type === 'keyup') {\n      if (selfInstance.inputForm_currentQueryString === $t.value) {\n        return;\n      }\n      selfInstance.inputForm_currentQueryString = $t.value;\n      selfInstance.autoCompleteFilterResults(selfInstance.inputForm_currentQueryString);\n    }\n    if (e.type === 'focus') {\n      selfInstance.onInputAreaFocus();\n    }\n    if (e.type === 'blur') {\n\n      selfInstance.onInputAreaFocus(false);\n    }\n  }\n}","import {\n  DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT,\n  DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS,\n  DZS_CHIP_SELECTOR_CHIPS_SELECTED,\n  DZS_CHIP_SELECTOR_CLASS_NAME\n} from \"./config/dzs-chip-selector.config\";\nimport {domRemoveChildren, getComputedProp, insertHtml} from \"./js_common/dzs_helpers\";\nimport {ChipSelectorItem, ChipSelectorOptions, currentStatusType} from \"./dzs-chip-selector.type\";\nimport {DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE} from \"./dzs-chip-selector.config\";\nimport {dzsChipSelectorDefaultOptions} from \"./config/dzs-chip-selector--defaultOptions\";\nimport {initChipSelector} from \"./jsinc/chipSelectorHelpers\";\nimport {setupHandlers} from \"./jsinc/chipSelectorHandlers\";\nimport {chipSelectorInitStructure, viewChipSelectorChipItemStructure} from \"./jsinc/chipSelectorViewConstructStructure\";\n// import {$es} from '../../deps/esjquery/js/_esjquery';\n\n\ndeclare global {\n  interface Window {\n    dzs_initDzsChipSelector: ($argChip_: HTMLElement, options?: ChipSelectorOptions) => void;\n  }\n\n  interface HTMLElement {\n    webComponent?: any;\n  }\n}\n\n\n// todo: temp\n// type esJquery = {\n//\n//   addClass: (arg:string) => {}\n//   find: (arg:string) => esJquery\n// };\n\nexport class DzsChipSelector {\n  /** DOM - main element wrapper */\n  $elem_!: HTMLElement;\n  $inputNewElement_!: HTMLInputElement;\n  $autoCompleteList!: HTMLElement;\n  $form!: HTMLElement;\n  // $elem: esJquery;\n  // $inputNewElement: esJquery;\n\n  styleIsSkinSet = false;\n\n  feedSource = 'form';\n\n  /** single source of truth -- filtered by keyboard */\n  autoCompleteOptions: ChipSelectorItem[] = [];\n  /** single source of truth */\n  persistentOptions: ChipSelectorItem[] = [];\n  placeholderNoItemsFound!: string;\n  /** config options */\n  chipSelectorOptions!: ChipSelectorOptions;\n\n  inputForm_currentQueryString = '';\n\n\n  constructor($elem: HTMLElement, chipSelectorOptions: ChipSelectorOptions) {\n\n    if (!$elem) {\n      return;\n    }\n\n    this.chipSelectorOptions = Object.assign({...dzsChipSelectorDefaultOptions}, chipSelectorOptions);\n\n    this.$elem_ = $elem;\n    ($elem as any).selfInstance = this;\n    this.placeholderNoItemsFound = String(this.chipSelectorOptions.placeholderNoItemsFound);\n    if (($elem as any).isDzsChipsInited) {\n      return;\n    }\n\n    this.initClass()\n  }\n\n  initClass() {\n\n    initChipSelector(this);\n\n    chipSelectorInitStructure(this);\n    this.initAfterStructure();\n  }\n\n  reinit() {\n    const selfInstance = this;\n\n    const $form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLElement;\n\n    if ($form) {\n      this.feedSource = 'form';\n      // @ts-ignore\n      this.chipSelectorOptions.persistentOptions = null;\n      this.getOptionsFromForm($form);\n    } else {\n      if (this.$elem_.getAttribute('data-persistentOptions')) {\n        this.readAttrForPersistentOptions();\n      }\n    }\n    if (this.chipSelectorOptions.persistentOptions) {\n      this.feedSource = 'options';\n      this.persistentOptions = this.chipSelectorOptions.persistentOptions;\n      this.autoCompleteOptions = this.chipSelectorOptions.persistentOptions;\n    }\n    this.createListFromOptions();\n    selfInstance.updateChipsFromOptions();\n  }\n\n  readAttrForPersistentOptions() {\n    const dataPersistentOptions = this.$elem_.getAttribute('data-persistentOptions');\n    this.chipSelectorOptions.persistentOptions = JSON.parse(String(dataPersistentOptions));\n  }\n\n  getOptionsFromForm($form: HTMLElement) {\n\n    // -- parse main form\n    // @ts-ignore\n    $form.childNodes.forEach(($label: HTMLElement) => {\n      if ($label.nodeName.toLowerCase() === 'LABEL'.toLowerCase()) {\n\n\n        const $input = $label.querySelector('input');\n        const labelHtml = $label.innerHTML;\n        const labelHtmlCurated = labelHtml.replace(/<input.*?>/g, '');\n\n\n        const newItem: ChipSelectorItem = {\n          htmlContent: labelHtmlCurated,\n          value: String($input?.value),\n          currentStatus: $input?.checked ? currentStatusType.CHECKED : currentStatusType.UNCHECKED\n        };\n\n        this.persistentOptions.push(newItem);\n        this.autoCompleteOptions.push(newItem);\n      }\n    })\n  }\n\n\n  /**\n   init--\n   initAfterStructure--\n   reinit--\n   */\n  initAfterStructure() {\n    const selfInstance = this;\n    selfInstance.$inputNewElement_ = this.$elem_.querySelector('.dzs-chip-selector--input-new-element') as HTMLInputElement;\n    selfInstance.$autoCompleteList = this.$elem_.querySelector('.dzs-chip-selector--autocompletelist') as HTMLInputElement;\n    selfInstance.$form = this.$elem_.querySelector('.dzs-chip-selector--form') as HTMLInputElement;\n\n    setupHandlers(this);\n\n\n    this.reinit();\n  }\n\n  onInputAreaFocus(isFocus = true) {\n\n    const autocompleteListX = this.$inputNewElement_.getBoundingClientRect().x - this.$elem_.getBoundingClientRect().x;\n\n    if (isFocus) {\n      this.$autoCompleteList.style.left = autocompleteListX + 'px';\n      this.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    } else {\n      this.$elem_.classList.remove(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-new-element-focused');\n    }\n  }\n\n\n  static getOptionFromValue(options: any[], dataValue: string) {\n\n    const foundItems = options.filter((item) => item.value === dataValue);\n\n    return foundItems[0];\n  }\n\n\n  /**\n   * updates from single source of truth this.$autoCompleteList -- .dzs-chip-selector--autocompletelist--items\n   */\n  updateListFromOptions() {\n\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n\n    let minWidthChild = null;\n    $ulItems?.childNodes.forEach(child => {\n\n      const dataValue = String((child as HTMLElement).getAttribute('data-value'));\n      const persistentOption = DzsChipSelector.getOptionFromValue(this.persistentOptions, dataValue);\n\n\n      if (persistentOption !== undefined) {\n        if (persistentOption.currentStatus === currentStatusType.UNCHECKED) {\n          (child as HTMLElement).classList.remove(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n        if (persistentOption.currentStatus === currentStatusType.CHECKED) {\n          (child as HTMLElement).classList.add(DZS_CHIP_SELECTOR_CHIPS_SELECTED);\n        }\n      }\n\n\n    })\n\n  }\n\n  /**\n   * updates the DOM -> FORM from single source of truth this.$autoCompleteList\n   */\n  updateFormFromOptions() {\n    const selfInstance = this;\n\n    if (this.feedSource === 'form') {\n\n      domRemoveChildren(selfInstance.$form);\n    }\n\n    if (this.$elem_.webComponent && this.$elem_.webComponent.onUpdate) {\n      this.chipSelectorOptions.onUpdateFunction = this.$elem_.webComponent.onUpdate;\n    }\n    if (this.chipSelectorOptions.onUpdateFunction) {\n      this.chipSelectorOptions.onUpdateFunction(this.persistentOptions);\n    }\n\n\n    if (this.feedSource === 'form') {\n      this.persistentOptions.forEach(item => {\n        insertHtml(selfInstance.$form, `<label><input type=\"checkbox\" ${item.currentStatus === currentStatusType.CHECKED ? currentStatusType.CHECKED : ''} name=\"subject[]\" value=\"${item.value}\">${item.htmlContent}</label>`)\n      })\n    }\n  }\n\n  /**\n   * updates from single source of truth this.$autoCompleteList\n   */\n  updateChipsFromOptions() {\n    const selfInstance = this;\n\n    const $chipsList = selfInstance.$elem_.querySelector('.dzs-chip-selector--chip-list-wrapper');\n    domRemoveChildren($chipsList as HTMLElement);\n\n    let tooltipContent = '';\n\n    let overflowPlaceholderWidth = 0;\n\n    const minAutocompleteInputWidth = getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--input-new-element--label') as HTMLElement, 'min-width', true) as number;\n    const containerWidth = getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--container') as HTMLElement, 'width', true) as number;\n    let totalChipsWidth = 0;\n    let isOverflowing = false;\n\n\n    if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n      overflowPlaceholderWidth = Number(getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--overflow-placeholder') as HTMLElement, 'width', true)) + Number(getComputedProp(selfInstance.$elem_.querySelector('.dzs-chip-selector--overflow-placeholder') as HTMLElement, 'margin-left', true));\n    }\n\n    this.persistentOptions.forEach(item => {\n      if (item.currentStatus === currentStatusType.CHECKED) {\n        insertHtml($chipsList as HTMLElement, viewChipSelectorChipItemStructure(item));\n        const $lastChip = $chipsList!.lastElementChild as HTMLElement;\n\n        if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n          totalChipsWidth += getComputedProp($lastChip as HTMLElement, 'width', true) as number + 3;\n\n          if (tooltipContent) {\n            tooltipContent += ', ';\n          }\n\n          if (totalChipsWidth > containerWidth - minAutocompleteInputWidth - overflowPlaceholderWidth) {\n            $lastChip.style.display = 'none';\n            isOverflowing = true;\n          }\n          tooltipContent += item.htmlContent;\n        }\n      }\n    })\n\n    if (isOverflowing) {\n      selfInstance.$elem_.classList.add('dzs-chip-selector--is-overflowing');\n    } else {\n\n      selfInstance.$elem_.classList.remove('dzs-chip-selector--is-overflowing');\n    }\n    if (!selfInstance.chipSelectorOptions.viewIsWrapping) {\n      selfInstance.$elem_.querySelector('.' + DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT)!.innerHTML = tooltipContent;\n    }\n\n\n  }\n\n  /**\n   * create the list from currentItems\n   */\n  createListFromOptions() {\n\n    // todo: wrong, find suggestedItems\n    const $ulItems = this.$autoCompleteList.querySelector('.dzs-chip-selector--autocompletelist--items');\n\n    domRemoveChildren($ulItems as HTMLElement);\n    this.autoCompleteOptions.forEach(item => {\n      insertHtml($ulItems as HTMLElement, `<li class=\"dzs-chip-selector--autocompletelist--items--item ${item.currentStatus === currentStatusType.CHECKED ? DZS_CHIP_SELECTOR_CHIPS_SELECTED : ''}\" data-value=\"${item.value}\">${item.htmlContent}</li>`);\n    })\n  }\n\n  getAutocompleteItemDomFromValue(arg: string) {\n    const $items = this.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n    $items.forEach(($item) => {\n      if ($item.getAttribute('data-value') === arg) {\n        return $item;\n      }\n    })\n  }\n\n  /**\n   * filter on each letter\n   */\n  autoCompleteFilterResults(stringSequence: string) {\n\n\n    if (stringSequence != this.inputForm_currentQueryString) {\n      return;\n    }\n\n    if (this.chipSelectorOptions.middlewareFilterResults) {\n      (this.chipSelectorOptions.middlewareFilterResults(this, stringSequence) as Promise<any>).then(() => {\n\n        filterResultsFrontend(this);\n      }).catch((err) => {\n        console.log('error - ');\n        console.log(err)\n      });\n    } else {\n      filterResultsFrontend(this);\n    }\n\n\n    function filterResultsFrontend(selfInstance: DzsChipSelector) {\n\n      selfInstance.autoCompleteOptions.forEach((autocompleteOption) => {\n      })\n\n      const $autoCompleteListItems = selfInstance.$autoCompleteList.querySelectorAll('.' + DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS);\n      stringSequence = stringSequence.toLowerCase();\n\n      let nrResultsFound = 0;\n      $autoCompleteListItems.forEach(($autoCompleteListItem) => {\n        if (selfInstance.inputForm_currentQueryString === '' || ($autoCompleteListItem.textContent || '').toLowerCase().indexOf(stringSequence) > -1) {\n          $autoCompleteListItem.classList.remove('is-hidden');\n          nrResultsFound++;\n        } else {\n          $autoCompleteListItem.classList.add('is-hidden');\n        }\n      })\n\n      if (nrResultsFound === 0) {\n        selfInstance.$autoCompleteList.classList.add(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      } else {\n        selfInstance.$autoCompleteList.classList.remove(DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE);\n      }\n    }\n  }\n}\n\nfunction getWindow() {\n  return window || globalThis as any;\n}\n\nexport function init_chipSelector($argChip_: HTMLElement, options: ChipSelectorOptions = {}) {\n  new DzsChipSelector($argChip_, options);\n\n}\n\ngetWindow().dzs_initDzsChipSelector = init_chipSelector;\n\n","import {DzsChipSelector} from \"../dzs-chip-selector\";\nimport {DZS_CHIP_SELECTOR_CLASS_NAME} from \"../config/dzs-chip-selector.config\";\nimport {detectRegexPairs} from \"../js_common/dzs_helpers\";\n\n\nexport function initChipSelector(selfInstance: DzsChipSelector){\n  selfInstance.styleIsSkinSet = false;\n\n  (selfInstance.$elem_ as any).isDzsChipsInited = true;\n\n  const matches = detectRegexPairs(selfInstance.$elem_.className);\n\n  if(matches.length){\n    selfInstance.styleIsSkinSet = true;\n  }\n\n  selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--is-inited');\n\n  if(!selfInstance.chipSelectorOptions.viewIsWrapping){\n\n    selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + '--view-one-line');\n  }\n\n  if(!selfInstance.styleIsSkinSet){\n    selfInstance.$elem_.classList.add(DZS_CHIP_SELECTOR_CLASS_NAME + `--skin-${selfInstance.chipSelectorOptions.viewSkin}`);\n  }\n}","import {DzsChipSelector} from \"../dzs-chip-selector\";\nimport {insertHtml} from \"../js_common/dzs_helpers\";\nimport {DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT} from \"../config/dzs-chip-selector.config\";\nimport {ChipSelectorItem} from \"../dzs-chip-selector.type\";\n\nexport function viewChipSelectorChipItemStructure(item: ChipSelectorItem) {\n  return `<li data-value=\"${item.value}\" class=\"dzs-chip-selector--item\">\n<div class=\"dzs-chip-selector--item--content\">${item.htmlContent}</div>\n<button _ngcontent-mua-c151=\"\" matchipremove=\"\" class=\"dzs-chip-selector--item--remove\"  type=\"button\">\n  <figure>x</figure>\n</button>\n</li>`;\n}\n\nexport function chipSelectorInitStructure(selfInstance: DzsChipSelector) {\n\n\n  if (!selfInstance.$elem_.querySelector('.dzs-chip-selector--container')) {\n\n    const chipListString = `<div class=\"dzs-chip-selector--chip-list\">\n              <ul class=\"dzs-chip-selector--chip-list-wrapper\">\n\n              </ul>\n            </div>`;\n\n\n    const chipListOverflowPlaceholder = `<div class=\"dzs-chip-selector--overflow-placeholder\"><span>...</span>\n  <span class=\"${DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT}\">This is the tooltip text</span></div>`;\n\n    const chipListInputNewElement = `<label class=\"dzs-chip-selector--input-new-element--label\">\n              <input placeholder=\"New fruit...\" class=\"dzs-chip-selector--input-new-element\"\n                     autocomplete=\"off\"\n                     role=\"combobox\" aria-autocomplete=\"list\" aria-expanded=\"false\"\n                     aria-haspopup=\"listbox\"\n                     aria-owns=\"mat-autocomplete-1\">\n            </label>`;\n\n\n    insertHtml(selfInstance.$elem_, `<div class=\"dzs-chip-selector--container\">\n          <div class=\"dzs-chip-selector--form-field\">\n            ${chipListString}\n            ${selfInstance.chipSelectorOptions.viewIsWrapping ? '' : chipListOverflowPlaceholder}\n            ${chipListInputNewElement}\n          </div>\n        </div>`)\n\n  }\n\n  if (!selfInstance.$elem_.querySelector('.dzs-chip-selector--autocompletelist')) {\n\n    insertHtml(selfInstance.$elem_, `<div class=\"dzs-chip-selector--autocompletelist\">\n          <div class=\"dzs-chip-selector--autocompletelist--inner\">\n            <div class=\"dzs-chip-selector--autocompletelist--placeholder\">No items found</div>\n            <ul class=\"dzs-chip-selector--autocompletelist--items\">\n            </ul>\n          </div>\n        </div>`)\n\n  }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// Create a class for the element\nimport {ChipSelectorItem, ChipSelectorOptions} from \"./dzs-chip-selector.type\";\nimport {DzsChipSelector} from \"./dzs-chip-selector\";\nimport styleChipTextContent from './dzs-chip-selector.scss';\n\n\nexport class DzsChipSelectorWrapper extends HTMLElement {\n  shadow: ShadowRoot;\n  wrapper: HTMLElement;\n\n  constructor() {\n    // Always call super first in constructor\n    super();\n\n    // Create a shadow root\n    this.shadow = this.attachShadow({mode: 'open'});\n\n    // Create spans\n    this.wrapper = document.createElement('div');\n    this.wrapper.setAttribute('class', 'dzs-chip-selector-wrapper');\n\n    this.wrapper.innerHTML = `<div class=\"dzs-chip-selector\" >\n      </div>`;\n\n\n    // Create some CSS to apply to the shadow dom\n\n    console.log(this);\n    let skinCss = null;\n    let skinLink: HTMLElement | null = null;\n    let styleChipInner = null;\n\n    this.childNodes.forEach((el) => {\n      if ((el as any).tagName === 'STYLE') {\n        skinCss = el;\n      }\n      if ((el as any).tagName === 'LINK') {\n        skinLink = el as HTMLElement;\n      }\n    });\n\n    const styleChip = document.createElement('style');\n    styleChip.type = 'text/css';\n    styleChip.appendChild(document.createTextNode(styleChipTextContent));\n\n\n\n    if(skinCss){\n      styleChipInner = document.createElement('style');\n      styleChipInner.type = 'text/css';\n      styleChipInner.appendChild(skinCss);\n    }\n\n\n    // Attach the created elements to the shadow dom\n    this.shadow.appendChild(this.wrapper);\n    this.shadow.appendChild(styleChip);\n    if(styleChipInner){\n      this.shadow.appendChild(styleChipInner);\n    }\n    if(skinLink){\n      (skinLink as HTMLElement).setAttribute('href', String((skinLink as HTMLElement).getAttribute('data-lazy-href')));\n      this.shadow.appendChild(skinLink);\n    }\n\n\n  }\n\n  renderComponent() {\n    console.log('rendered component');\n\n\n    const $chipSelector = this.wrapper.querySelector('.dzs-chip-selector');\n    ($chipSelector as any).webComponent = this;\n\n\n    if ($chipSelector) {\n\n      const chipSelectorOptions: ChipSelectorOptions = {};\n\n      const dataPersistentOptions = this.getAttribute('data-persistentOptions');\n      chipSelectorOptions.persistentOptions = JSON.parse(String(dataPersistentOptions));\n      chipSelectorOptions.onUpdateFunction = (allOptions: ChipSelectorItem[]) => {\n        const selectedOptions = allOptions.filter((el: ChipSelectorItem) => el.currentStatus === 'checked');\n        console.log({selectedOptions});\n      };\n      // chipSelectorOptions.viewSkin = 'alceva';\n\n      // setTimeout(()=>{\n      //\n      //   import('./style/skins/skin-default.scss').then((ar)=>{\n      //   }) ;\n      // },1000);\n\n      new DzsChipSelector(this.wrapper.querySelector('.dzs-chip-selector') as HTMLElement, chipSelectorOptions);\n    }\n  }\n\n  /**\n   * called on connected\n   */\n  connectedCallback() {\n    console.log('connectedCallback()');\n    this.renderComponent();\n\n  }\n\n}\n\n// Define the new element\ncustomElements.define('dzs-chip-selector', DzsChipSelectorWrapper);\n\n/**\n * returns the sum\n */\nexport function ceva(arg: number): number {\n\n  return arg;\n}","export default \".dzs-chip-selector{position:relative}.dzs-chip-selector .dzs-chip-selector--container{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%;background-color:rgba(0,0,0,.0392156863);border-radius:5px;padding:10px}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--chip-list{flex-shrink:0}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--chip-list ul.dzs-chip-selector--chip-list-wrapper{margin:0;padding:0;display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--chip-list ul.dzs-chip-selector--chip-list-wrapper .dzs-chip-selector--item{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:5px;align-items:center;cursor:default;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:rgba(0,0,0,0);border:none;-webkit-appearance:none;padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px;background-color:#e0e0e0;color:rgba(0,0,0,.8705882353);display:inline-block;vertical-align:middle;white-space:nowrap}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--chip-list ul.dzs-chip-selector--chip-list-wrapper .dzs-chip-selector--item .dzs-chip-selector--item--content{display:inline-block;vertical-align:middle}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--item--remove{order:none;appearance:none;display:inline-block;vertical-align:middle;border:0;-moz-appearance:none;padding:0;background:none;margin-left:8px;margin-right:0;color:rgba(0,0,0,.8705882353);opacity:.4;width:18px;height:18px;cursor:pointer;position:relative}.dzs-chip-selector .dzs-chip-selector--container .dzs-chip-selector--form-field .dzs-chip-selector--item--remove>figure{position:absolute;top:50%;left:50%;margin:0;transform:translate3d(-50%, -50%, 0)}.dzs-chip-selector.dzs-chip-selector--view-one-line:not(.a):not(.a):not(.a) .dzs-chip-selector--form-field{width:100%;text-overflow:ellipsis;flex-wrap:nowrap}.dzs-chip-selector.dzs-chip-selector--view-one-line:not(.a):not(.a):not(.a) .dzs-chip-selector--chip-list-wrapper{flex-wrap:nowrap}.dzs-chip-selector.dzs-chip-selector--view-one-line:not(.a):not(.a):not(.a) .dzs-chip-selector--overflow-placeholder{display:none;width:15px;margin-left:5px;cursor:pointer}.dzs-chip-selector.dzs-chip-selector--view-one-line:not(.a):not(.a):not(.a).dzs-chip-selector--is-overflowing .dzs-chip-selector--overflow-placeholder{display:inline-block;position:relative}.dzs-chip-selector.dzs-chip-selector--view-one-line:not(.a):not(.a):not(.a).dzs-chip-selector--is-overflowing .dzs-chip-selector--overflow-placeholder .dzs-chip-selector--overflow-tooltip{width:120px;background-color:#555;color:#fff;text-align:center;padding:5px 0;border-radius:3px;position:absolute;z-index:1;bottom:150%;left:50%;margin-left:-60px;opacity:0;visibility:hidden;font-size:13px;transition:opacity .3s;text-transform:uppercase;font-size:11px;font-weight:bold}.dzs-chip-selector.dzs-chip-selector--view-one-line:not(.a):not(.a):not(.a).dzs-chip-selector--is-overflowing .dzs-chip-selector--overflow-placeholder .dzs-chip-selector--overflow-tooltip:after{content:\\\"\\\";position:absolute;left:50%;top:100%;width:0;height:0;margin-left:-2.5px;border-left:5px solid rgba(0,0,0,0);border-right:5px solid rgba(0,0,0,0);border-top:5px solid #555}.dzs-chip-selector.dzs-chip-selector--view-one-line:not(.a):not(.a):not(.a).dzs-chip-selector--is-overflowing .dzs-chip-selector--overflow-placeholder:hover .dzs-chip-selector--overflow-tooltip{visibility:visible;opacity:1}.dzs-chip-selector--input-new-element--label{margin-left:4px;margin-bottom:0;max-width:50%;flex:1 2 100px;min-width:100px}.dzs-chip-selector--input-new-element{font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;max-width:100%;vertical-align:bottom;text-align:inherit;box-sizing:content-box;appearance:none;margin:4px}.dzs-chip-selector.dzs-chip-selector--is-new-element-focused .dzs-chip-selector--autocompletelist{opacity:1;visibility:visible}.dzs-chip-selector--autocompletelist{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000;display:block;max-width:100%;max-height:100%;opacity:0;visibility:hidden;transition-property:visibility,opacity;transition-duration:.1s;transition-timing-function:ease-out}.dzs-chip-selector--autocompletelist--inner{padding:5px;border-radius:5px;padding:10px;background-color:#dadada;top:11px;position:relative}.dzs-chip-selector--autocompletelist .dzs-chip-selector--autocompletelist--placeholder{display:none}.dzs-chip-selector--autocompletelist.dzs-chip-selector--autocompletelist--is-placeholder-visible .dzs-chip-selector--autocompletelist--placeholder{display:block}.dzs-chip-selector--autocompletelist.dzs-chip-selector--autocompletelist--is-placeholder-visible ul.dzs-chip-selector--autocompletelist--items{display:none}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items{margin:0;padding:0;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px;list-style:none;list-style:none}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items .dzs-chip-selector--autocompletelist--items--item{width:100%;border-bottom:1px solid rgba(0,0,0,.1);cursor:pointer;padding:5px;transition-property:background-color;transition-duration:.3s;transition-timing-function:ease-out}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items .dzs-chip-selector--autocompletelist--items--item.is-hidden{display:none}.dzs-chip-selector--autocompletelist ul.dzs-chip-selector--autocompletelist--items .dzs-chip-selector--autocompletelist--items--item:last-child{border-bottom:0}.dzs-chip-selector{opacity:1}.dzs-chip-selector .dzs-chip-selector--autocompletelist--inner{opacity:1;transition-property:opacity;transition-duration:.3s;transition-timing-function:ease-out}.dzs-chip-selector.dzs-chip-selector--is-autocomplete-list-loading .dzs-chip-selector--autocompletelist--inner{opacity:.7;visibility:visible}\";"],"names":["currentStatusType","DZS_CHIP_SELECTOR_CLASS_NAME","DZS_CHIP_SELECTOR_CHIPS_SELECTED","DZS_CHIP_SELECTOR_AUTOCOMPLETE_CLASS_NAME_ITEMS","DZS_CHIP_SELECTOR_CSS_SELECTOR_OVERFLOW_TOOLTIP_CONTENT","domRemoveChildren","$ulItems","firstChild","removeChild","insertHtml","t","html","position","insertAdjacentHTML","getComputedProp","el","cssProp","isGetAsNumber","console","log","trace","val","window","getComputedStyle","getPropertyValue","parseFloat","matchSelector","sel","matchedEl","this","matches","parentNode","DZS_CHIP_SELECTOR__CLASS_NAME__IS_PLACEHOLDER_VISIBLE","dzsChipSelectorDefaultOptions","placeholderNoItemsFound","middlewareFilterResults","viewSkin","viewIsWrapping","setupHandlers","selfInstance","handleInputEvent","e","$t","$inputNewElement_","type","inputForm_currentQueryString","value","autoCompleteFilterResults","onInputAreaFocus","addEventListener","$autoCompleteList","$target","target","persistentOptionIndex","dataValue","String","getAttribute","targetOption","DzsChipSelector","getOptionFromValue","autoCompleteOptions","persistentOption","persistentOptions","undefined","innerHTML","UNCHECKED","push","classList","contains","currentStatus","findIndex","length","splice","CHECKED","updateListFromOptions","updateFormFromOptions","updateChipsFromOptions","dispatchEvent","Event","$elem_","querySelector","$chip","$elem","chipSelectorOptions","Object","assign","isDzsChipsInited","initClass","styleIsSkinSet","str","match","regExp","exec","detectRegexPairs","className","add","chipListOverflowPlaceholder","chipSelectorInitStructure","initAfterStructure","$form","feedSource","getOptionsFromForm","readAttrForPersistentOptions","createListFromOptions","dataPersistentOptions","JSON","parse","childNodes","forEach","$label","nodeName","toLowerCase","$input","newItem","htmlContent","replace","checked","reinit","isFocus","autocompleteListX","getBoundingClientRect","x","style","left","remove","child","webComponent","onUpdate","onUpdateFunction","item","$chipsList","tooltipContent","overflowPlaceholderWidth","minAutocompleteInputWidth","containerWidth","totalChipsWidth","isOverflowing","Number","viewChipSelectorChipItemStructure","$lastChip","lastElementChild","display","arg","querySelectorAll","$item","stringSequence","filterResultsFrontend","autocompleteOption","$autoCompleteListItems","nrResultsFound","$autoCompleteListItem","textContent","indexOf","then","err","options","filter","globalThis","dzs_initDzsChipSelector","$argChip_","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","key","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","DzsChipSelectorWrapper","shadow","attachShadow","mode","wrapper","document","createElement","setAttribute","skinCss","skinLink","styleChipInner","tagName","styleChip","appendChild","createTextNode","$chipSelector","allOptions","selectedOptions","renderComponent","HTMLElement","customElements","define"],"sourceRoot":""}